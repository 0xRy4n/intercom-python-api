# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    The version of the OpenAPI document: Unstable
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from intercom_python_api import schemas  # noqa: F401


class SingleFilterSearchRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            field = schemas.StrSchema
            
            
            class operator(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "=": "EQUALS",
                        "!=": "EXCLAMATION_MARKEQUALS",
                        "IN": "IN",
                        "NIN": "NIN",
                        "<": "LESS_THAN",
                        ">": "GREATER_THAN",
                        "~": "TILDE",
                        "!~": "EXCLAMATION_MARKTILDE",
                        "^": "CIRCUMFLEX_ACCENT",
                        "$": "DOLLAR",
                    }
                
                @schemas.classproperty
                def EQUALS(cls):
                    return cls("=")
                
                @schemas.classproperty
                def EXCLAMATION_MARKEQUALS(cls):
                    return cls("!=")
                
                @schemas.classproperty
                def IN(cls):
                    return cls("IN")
                
                @schemas.classproperty
                def NIN(cls):
                    return cls("NIN")
                
                @schemas.classproperty
                def LESS_THAN(cls):
                    return cls("<")
                
                @schemas.classproperty
                def GREATER_THAN(cls):
                    return cls(">")
                
                @schemas.classproperty
                def TILDE(cls):
                    return cls("~")
                
                @schemas.classproperty
                def EXCLAMATION_MARKTILDE(cls):
                    return cls("!~")
                
                @schemas.classproperty
                def CIRCUMFLEX_ACCENT(cls):
                    return cls("^")
                
                @schemas.classproperty
                def DOLLAR(cls):
                    return cls("$")
            value = schemas.StrSchema
            __annotations__ = {
                "field": field,
                "operator": operator,
                "value": value,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["field"]) -> MetaOapg.properties.field: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["operator"]) -> MetaOapg.properties.operator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["field", "operator", "value", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["field"]) -> typing.Union[MetaOapg.properties.field, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["operator"]) -> typing.Union[MetaOapg.properties.operator, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> typing.Union[MetaOapg.properties.value, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["field", "operator", "value", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        field: typing.Union[MetaOapg.properties.field, str, schemas.Unset] = schemas.unset,
        operator: typing.Union[MetaOapg.properties.operator, str, schemas.Unset] = schemas.unset,
        value: typing.Union[MetaOapg.properties.value, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SingleFilterSearchRequest':
        return super().__new__(
            cls,
            *_args,
            field=field,
            operator=operator,
            value=value,
            _configuration=_configuration,
            **kwargs,
        )
