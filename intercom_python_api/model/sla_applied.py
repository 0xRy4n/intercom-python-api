# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    The version of the OpenAPI document: 2.9
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from intercom_python_api import schemas  # noqa: F401


class SlaApplied(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The SLA Applied object contains the details for which SLA has been applied to this conversation.
Important: if there are any canceled sla_events for the conversation - meaning an SLA has been manually removed from a conversation, the sla_status will always be returned as null.

    """


    class MetaOapg:
        
        class properties:
            sla_name = schemas.StrSchema
            
            
            class sla_status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "hit": "HIT",
                        "missed": "MISSED",
                        "cancelled": "CANCELLED",
                        "active": "ACTIVE",
                    }
                
                @schemas.classproperty
                def HIT(cls):
                    return cls("hit")
                
                @schemas.classproperty
                def MISSED(cls):
                    return cls("missed")
                
                @schemas.classproperty
                def CANCELLED(cls):
                    return cls("cancelled")
                
                @schemas.classproperty
                def ACTIVE(cls):
                    return cls("active")
            type = schemas.StrSchema
            __annotations__ = {
                "sla_name": sla_name,
                "sla_status": sla_status,
                "type": type,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sla_name"]) -> MetaOapg.properties.sla_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sla_status"]) -> MetaOapg.properties.sla_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["sla_name", "sla_status", "type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sla_name"]) -> typing.Union[MetaOapg.properties.sla_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sla_status"]) -> typing.Union[MetaOapg.properties.sla_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["sla_name", "sla_status", "type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, None, ],
        sla_name: typing.Union[MetaOapg.properties.sla_name, str, schemas.Unset] = schemas.unset,
        sla_status: typing.Union[MetaOapg.properties.sla_status, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SlaApplied':
        return super().__new__(
            cls,
            *_args,
            sla_name=sla_name,
            sla_status=sla_status,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )
