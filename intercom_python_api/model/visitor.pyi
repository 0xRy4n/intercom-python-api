# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    The version of the OpenAPI document: 2.9
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from intercom_python_api import schemas  # noqa: F401


class Visitor(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Visitors are useful for representing anonymous people that have not yet been identified. They usually represent website visitors. Visitors are not visible in Intercom platform. The Visitors resource provides methods to fetch, update, convert and delete.
    """


    class MetaOapg:
        
        class properties:
            type = schemas.StrSchema
            id = schemas.StrSchema
            user_id = schemas.StrSchema
            anonymous = schemas.BoolSchema
            email = schemas.StrSchema
            
            
            class phone(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'phone':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'name':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class pseudonym(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'pseudonym':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class avatar(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        type = schemas.StrSchema
                        
                        
                        class image_url(
                            schemas.StrBase,
                            schemas.NoneBase,
                            schemas.Schema,
                            schemas.NoneStrMixin
                        ):
                        
                        
                            class MetaOapg:
                                format = 'uri'
                        
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[None, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'image_url':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                )
                        __annotations__ = {
                            "type": type,
                            "image_url": image_url,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["image_url"]) -> MetaOapg.properties.image_url: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "image_url", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["image_url"]) -> typing.Union[MetaOapg.properties.image_url, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "image_url", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                    image_url: typing.Union[MetaOapg.properties.image_url, None, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'avatar':
                    return super().__new__(
                        cls,
                        *_args,
                        type=type,
                        image_url=image_url,
                        _configuration=_configuration,
                        **kwargs,
                    )
            app_id = schemas.StrSchema
            
            
            class companies(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class type(
                            schemas.EnumBase,
                            schemas.StrSchema
                        ):
                            
                            @schemas.classproperty
                            def COMPANY_LIST(cls):
                                return cls("company.list")
                        
                        
                        class companies(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                @staticmethod
                                def items() -> typing.Type['Company']:
                                    return Company
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple['Company'], typing.List['Company']],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'companies':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> 'Company':
                                return super().__getitem__(i)
                        __annotations__ = {
                            "type": type,
                            "companies": companies,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["companies"]) -> MetaOapg.properties.companies: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "companies", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["companies"]) -> typing.Union[MetaOapg.properties.companies, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "companies", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                    companies: typing.Union[MetaOapg.properties.companies, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'companies':
                    return super().__new__(
                        cls,
                        *_args,
                        type=type,
                        companies=companies,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class location_data(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        type = schemas.StrSchema
                        city_name = schemas.StrSchema
                        continent_code = schemas.StrSchema
                        country_code = schemas.StrSchema
                        country_name = schemas.StrSchema
                        postal_code = schemas.StrSchema
                        region_name = schemas.StrSchema
                        timezone = schemas.StrSchema
                        __annotations__ = {
                            "type": type,
                            "city_name": city_name,
                            "continent_code": continent_code,
                            "country_code": country_code,
                            "country_name": country_name,
                            "postal_code": postal_code,
                            "region_name": region_name,
                            "timezone": timezone,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["city_name"]) -> MetaOapg.properties.city_name: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["continent_code"]) -> MetaOapg.properties.continent_code: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["country_code"]) -> MetaOapg.properties.country_code: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["country_name"]) -> MetaOapg.properties.country_name: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["postal_code"]) -> MetaOapg.properties.postal_code: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["region_name"]) -> MetaOapg.properties.region_name: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["timezone"]) -> MetaOapg.properties.timezone: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "city_name", "continent_code", "country_code", "country_name", "postal_code", "region_name", "timezone", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["city_name"]) -> typing.Union[MetaOapg.properties.city_name, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["continent_code"]) -> typing.Union[MetaOapg.properties.continent_code, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["country_code"]) -> typing.Union[MetaOapg.properties.country_code, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["country_name"]) -> typing.Union[MetaOapg.properties.country_name, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["postal_code"]) -> typing.Union[MetaOapg.properties.postal_code, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["region_name"]) -> typing.Union[MetaOapg.properties.region_name, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["timezone"]) -> typing.Union[MetaOapg.properties.timezone, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "city_name", "continent_code", "country_code", "country_name", "postal_code", "region_name", "timezone", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                    city_name: typing.Union[MetaOapg.properties.city_name, str, schemas.Unset] = schemas.unset,
                    continent_code: typing.Union[MetaOapg.properties.continent_code, str, schemas.Unset] = schemas.unset,
                    country_code: typing.Union[MetaOapg.properties.country_code, str, schemas.Unset] = schemas.unset,
                    country_name: typing.Union[MetaOapg.properties.country_name, str, schemas.Unset] = schemas.unset,
                    postal_code: typing.Union[MetaOapg.properties.postal_code, str, schemas.Unset] = schemas.unset,
                    region_name: typing.Union[MetaOapg.properties.region_name, str, schemas.Unset] = schemas.unset,
                    timezone: typing.Union[MetaOapg.properties.timezone, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'location_data':
                    return super().__new__(
                        cls,
                        *_args,
                        type=type,
                        city_name=city_name,
                        continent_code=continent_code,
                        country_code=country_code,
                        country_name=country_name,
                        postal_code=postal_code,
                        region_name=region_name,
                        timezone=timezone,
                        _configuration=_configuration,
                        **kwargs,
                    )
            las_request_at = schemas.IntSchema
            created_at = schemas.IntSchema
            remote_created_at = schemas.IntSchema
            signed_up_at = schemas.IntSchema
            updated_at = schemas.IntSchema
            session_count = schemas.IntSchema
            
            
            class social_profiles(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class type(
                            schemas.EnumBase,
                            schemas.StrSchema
                        ):
                            
                            @schemas.classproperty
                            def SOCIAL_PROFILE_LIST(cls):
                                return cls("social_profile.list")
                        
                        
                        class social_profiles(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'social_profiles':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "type": type,
                            "social_profiles": social_profiles,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["social_profiles"]) -> MetaOapg.properties.social_profiles: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "social_profiles", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["social_profiles"]) -> typing.Union[MetaOapg.properties.social_profiles, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "social_profiles", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                    social_profiles: typing.Union[MetaOapg.properties.social_profiles, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'social_profiles':
                    return super().__new__(
                        cls,
                        *_args,
                        type=type,
                        social_profiles=social_profiles,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class owner_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'owner_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            unsubscribed_from_emails = schemas.BoolSchema
            marked_email_as_spam = schemas.BoolSchema
            has_hard_bounced = schemas.BoolSchema
            
            
            class tags(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class type(
                            schemas.EnumBase,
                            schemas.StrSchema
                        ):
                            
                            @schemas.classproperty
                            def TAG_LIST(cls):
                                return cls("tag.list")
                        
                        
                        class tags(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.AnyTypeSchema,
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            
                                            
                                            class type(
                                                schemas.EnumBase,
                                                schemas.StrSchema
                                            ):
                                                
                                                @schemas.classproperty
                                                def TAG(cls):
                                                    return cls("tag")
                                            id = schemas.StrSchema
                                            name = schemas.StrSchema
                                            __annotations__ = {
                                                "type": type,
                                                "id": id,
                                                "name": name,
                                            }
                                
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "id", "name", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "id", "name", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                                        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                                        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            type=type,
                                            id=id,
                                            name=name,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'tags':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "type": type,
                            "tags": tags,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "tags", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union[MetaOapg.properties.tags, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "tags", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                    tags: typing.Union[MetaOapg.properties.tags, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'tags':
                    return super().__new__(
                        cls,
                        *_args,
                        type=type,
                        tags=tags,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class segments(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class type(
                            schemas.EnumBase,
                            schemas.StrSchema
                        ):
                            
                            @schemas.classproperty
                            def SEGMENT_LIST(cls):
                                return cls("segment.list")
                        
                        
                        class segments(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'segments':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "type": type,
                            "segments": segments,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["segments"]) -> MetaOapg.properties.segments: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "segments", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["segments"]) -> typing.Union[MetaOapg.properties.segments, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "segments", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                    segments: typing.Union[MetaOapg.properties.segments, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'segments':
                    return super().__new__(
                        cls,
                        *_args,
                        type=type,
                        segments=segments,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class custom_attributes(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.StrSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, str, ],
                ) -> 'custom_attributes':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class referrer(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'referrer':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class utm_campaign(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'utm_campaign':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class utm_content(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'utm_content':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class utm_medium(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'utm_medium':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class utm_source(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'utm_source':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class utm_term(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'utm_term':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class do_not_track(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'do_not_track':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "type": type,
                "id": id,
                "user_id": user_id,
                "anonymous": anonymous,
                "email": email,
                "phone": phone,
                "name": name,
                "pseudonym": pseudonym,
                "avatar": avatar,
                "app_id": app_id,
                "companies": companies,
                "location_data": location_data,
                "las_request_at": las_request_at,
                "created_at": created_at,
                "remote_created_at": remote_created_at,
                "signed_up_at": signed_up_at,
                "updated_at": updated_at,
                "session_count": session_count,
                "social_profiles": social_profiles,
                "owner_id": owner_id,
                "unsubscribed_from_emails": unsubscribed_from_emails,
                "marked_email_as_spam": marked_email_as_spam,
                "has_hard_bounced": has_hard_bounced,
                "tags": tags,
                "segments": segments,
                "custom_attributes": custom_attributes,
                "referrer": referrer,
                "utm_campaign": utm_campaign,
                "utm_content": utm_content,
                "utm_medium": utm_medium,
                "utm_source": utm_source,
                "utm_term": utm_term,
                "do_not_track": do_not_track,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["anonymous"]) -> MetaOapg.properties.anonymous: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phone"]) -> MetaOapg.properties.phone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pseudonym"]) -> MetaOapg.properties.pseudonym: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["avatar"]) -> MetaOapg.properties.avatar: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["app_id"]) -> MetaOapg.properties.app_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companies"]) -> MetaOapg.properties.companies: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location_data"]) -> MetaOapg.properties.location_data: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["las_request_at"]) -> MetaOapg.properties.las_request_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remote_created_at"]) -> MetaOapg.properties.remote_created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signed_up_at"]) -> MetaOapg.properties.signed_up_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["session_count"]) -> MetaOapg.properties.session_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["social_profiles"]) -> MetaOapg.properties.social_profiles: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner_id"]) -> MetaOapg.properties.owner_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unsubscribed_from_emails"]) -> MetaOapg.properties.unsubscribed_from_emails: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["marked_email_as_spam"]) -> MetaOapg.properties.marked_email_as_spam: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_hard_bounced"]) -> MetaOapg.properties.has_hard_bounced: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["segments"]) -> MetaOapg.properties.segments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_attributes"]) -> MetaOapg.properties.custom_attributes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["referrer"]) -> MetaOapg.properties.referrer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["utm_campaign"]) -> MetaOapg.properties.utm_campaign: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["utm_content"]) -> MetaOapg.properties.utm_content: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["utm_medium"]) -> MetaOapg.properties.utm_medium: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["utm_source"]) -> MetaOapg.properties.utm_source: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["utm_term"]) -> MetaOapg.properties.utm_term: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["do_not_track"]) -> MetaOapg.properties.do_not_track: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "id", "user_id", "anonymous", "email", "phone", "name", "pseudonym", "avatar", "app_id", "companies", "location_data", "las_request_at", "created_at", "remote_created_at", "signed_up_at", "updated_at", "session_count", "social_profiles", "owner_id", "unsubscribed_from_emails", "marked_email_as_spam", "has_hard_bounced", "tags", "segments", "custom_attributes", "referrer", "utm_campaign", "utm_content", "utm_medium", "utm_source", "utm_term", "do_not_track", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_id"]) -> typing.Union[MetaOapg.properties.user_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["anonymous"]) -> typing.Union[MetaOapg.properties.anonymous, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phone"]) -> typing.Union[MetaOapg.properties.phone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pseudonym"]) -> typing.Union[MetaOapg.properties.pseudonym, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["avatar"]) -> typing.Union[MetaOapg.properties.avatar, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["app_id"]) -> typing.Union[MetaOapg.properties.app_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companies"]) -> typing.Union[MetaOapg.properties.companies, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location_data"]) -> typing.Union[MetaOapg.properties.location_data, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["las_request_at"]) -> typing.Union[MetaOapg.properties.las_request_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remote_created_at"]) -> typing.Union[MetaOapg.properties.remote_created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signed_up_at"]) -> typing.Union[MetaOapg.properties.signed_up_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> typing.Union[MetaOapg.properties.updated_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["session_count"]) -> typing.Union[MetaOapg.properties.session_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["social_profiles"]) -> typing.Union[MetaOapg.properties.social_profiles, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner_id"]) -> typing.Union[MetaOapg.properties.owner_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unsubscribed_from_emails"]) -> typing.Union[MetaOapg.properties.unsubscribed_from_emails, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["marked_email_as_spam"]) -> typing.Union[MetaOapg.properties.marked_email_as_spam, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_hard_bounced"]) -> typing.Union[MetaOapg.properties.has_hard_bounced, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union[MetaOapg.properties.tags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["segments"]) -> typing.Union[MetaOapg.properties.segments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_attributes"]) -> typing.Union[MetaOapg.properties.custom_attributes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["referrer"]) -> typing.Union[MetaOapg.properties.referrer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["utm_campaign"]) -> typing.Union[MetaOapg.properties.utm_campaign, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["utm_content"]) -> typing.Union[MetaOapg.properties.utm_content, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["utm_medium"]) -> typing.Union[MetaOapg.properties.utm_medium, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["utm_source"]) -> typing.Union[MetaOapg.properties.utm_source, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["utm_term"]) -> typing.Union[MetaOapg.properties.utm_term, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["do_not_track"]) -> typing.Union[MetaOapg.properties.do_not_track, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "id", "user_id", "anonymous", "email", "phone", "name", "pseudonym", "avatar", "app_id", "companies", "location_data", "las_request_at", "created_at", "remote_created_at", "signed_up_at", "updated_at", "session_count", "social_profiles", "owner_id", "unsubscribed_from_emails", "marked_email_as_spam", "has_hard_bounced", "tags", "segments", "custom_attributes", "referrer", "utm_campaign", "utm_content", "utm_medium", "utm_source", "utm_term", "do_not_track", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, None, ],
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        user_id: typing.Union[MetaOapg.properties.user_id, str, schemas.Unset] = schemas.unset,
        anonymous: typing.Union[MetaOapg.properties.anonymous, bool, schemas.Unset] = schemas.unset,
        email: typing.Union[MetaOapg.properties.email, str, schemas.Unset] = schemas.unset,
        phone: typing.Union[MetaOapg.properties.phone, None, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, None, str, schemas.Unset] = schemas.unset,
        pseudonym: typing.Union[MetaOapg.properties.pseudonym, None, str, schemas.Unset] = schemas.unset,
        avatar: typing.Union[MetaOapg.properties.avatar, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        app_id: typing.Union[MetaOapg.properties.app_id, str, schemas.Unset] = schemas.unset,
        companies: typing.Union[MetaOapg.properties.companies, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        location_data: typing.Union[MetaOapg.properties.location_data, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        las_request_at: typing.Union[MetaOapg.properties.las_request_at, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        remote_created_at: typing.Union[MetaOapg.properties.remote_created_at, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        signed_up_at: typing.Union[MetaOapg.properties.signed_up_at, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        updated_at: typing.Union[MetaOapg.properties.updated_at, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        session_count: typing.Union[MetaOapg.properties.session_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        social_profiles: typing.Union[MetaOapg.properties.social_profiles, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        owner_id: typing.Union[MetaOapg.properties.owner_id, None, str, schemas.Unset] = schemas.unset,
        unsubscribed_from_emails: typing.Union[MetaOapg.properties.unsubscribed_from_emails, bool, schemas.Unset] = schemas.unset,
        marked_email_as_spam: typing.Union[MetaOapg.properties.marked_email_as_spam, bool, schemas.Unset] = schemas.unset,
        has_hard_bounced: typing.Union[MetaOapg.properties.has_hard_bounced, bool, schemas.Unset] = schemas.unset,
        tags: typing.Union[MetaOapg.properties.tags, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        segments: typing.Union[MetaOapg.properties.segments, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        custom_attributes: typing.Union[MetaOapg.properties.custom_attributes, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        referrer: typing.Union[MetaOapg.properties.referrer, None, str, schemas.Unset] = schemas.unset,
        utm_campaign: typing.Union[MetaOapg.properties.utm_campaign, None, str, schemas.Unset] = schemas.unset,
        utm_content: typing.Union[MetaOapg.properties.utm_content, None, str, schemas.Unset] = schemas.unset,
        utm_medium: typing.Union[MetaOapg.properties.utm_medium, None, str, schemas.Unset] = schemas.unset,
        utm_source: typing.Union[MetaOapg.properties.utm_source, None, str, schemas.Unset] = schemas.unset,
        utm_term: typing.Union[MetaOapg.properties.utm_term, None, str, schemas.Unset] = schemas.unset,
        do_not_track: typing.Union[MetaOapg.properties.do_not_track, None, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Visitor':
        return super().__new__(
            cls,
            *_args,
            type=type,
            id=id,
            user_id=user_id,
            anonymous=anonymous,
            email=email,
            phone=phone,
            name=name,
            pseudonym=pseudonym,
            avatar=avatar,
            app_id=app_id,
            companies=companies,
            location_data=location_data,
            las_request_at=las_request_at,
            created_at=created_at,
            remote_created_at=remote_created_at,
            signed_up_at=signed_up_at,
            updated_at=updated_at,
            session_count=session_count,
            social_profiles=social_profiles,
            owner_id=owner_id,
            unsubscribed_from_emails=unsubscribed_from_emails,
            marked_email_as_spam=marked_email_as_spam,
            has_hard_bounced=has_hard_bounced,
            tags=tags,
            segments=segments,
            custom_attributes=custom_attributes,
            referrer=referrer,
            utm_campaign=utm_campaign,
            utm_content=utm_content,
            utm_medium=utm_medium,
            utm_source=utm_source,
            utm_term=utm_term,
            do_not_track=do_not_track,
            _configuration=_configuration,
            **kwargs,
        )

from intercom_python_api.model.company import Company
