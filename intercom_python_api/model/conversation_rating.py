# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    The version of the OpenAPI document: 2.7
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from intercom_python_api import schemas  # noqa: F401


class ConversationRating(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The Conversation Rating object which contains information on the rating and/or remark added by a Contact and the Admin assigned to the conversation.
    """


    class MetaOapg:
        
        class properties:
            rating = schemas.IntSchema
            remark = schemas.StrSchema
            created_at = schemas.IntSchema
        
            @staticmethod
            def contact() -> typing.Type['Reference']:
                return Reference
        
            @staticmethod
            def teammate() -> typing.Type['Reference']:
                return Reference
            __annotations__ = {
                "rating": rating,
                "remark": remark,
                "created_at": created_at,
                "contact": contact,
                "teammate": teammate,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rating"]) -> MetaOapg.properties.rating: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remark"]) -> MetaOapg.properties.remark: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contact"]) -> 'Reference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["teammate"]) -> 'Reference': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["rating", "remark", "created_at", "contact", "teammate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rating"]) -> typing.Union[MetaOapg.properties.rating, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remark"]) -> typing.Union[MetaOapg.properties.remark, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contact"]) -> typing.Union['Reference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["teammate"]) -> typing.Union['Reference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["rating", "remark", "created_at", "contact", "teammate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, None, ],
        rating: typing.Union[MetaOapg.properties.rating, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        remark: typing.Union[MetaOapg.properties.remark, str, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        contact: typing.Union['Reference', schemas.Unset] = schemas.unset,
        teammate: typing.Union['Reference', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ConversationRating':
        return super().__new__(
            cls,
            *_args,
            rating=rating,
            remark=remark,
            created_at=created_at,
            contact=contact,
            teammate=teammate,
            _configuration=_configuration,
            **kwargs,
        )

from intercom_python_api.model.reference import Reference
