# coding: utf-8

"""
    Intercom API

    The intercom API reference.  # noqa: E501

    The version of the OpenAPI document: 2.9
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from intercom_python_api import schemas  # noqa: F401


class Contact(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Contact are the objects that represent your leads and users in Intercom.
    """


    class MetaOapg:
        
        class properties:
            type = schemas.StrSchema
            id = schemas.StrSchema
            workspace_id = schemas.StrSchema
            role = schemas.StrSchema
            email = schemas.StrSchema
            
            
            class phone(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'phone':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class formatted_phone(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'formatted_phone':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'name':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class owner_id(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'owner_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            has_hard_bounced = schemas.BoolSchema
            marked_email_as_spam = schemas.BoolSchema
            unsubscribed_from_emails = schemas.BoolSchema
            created_at = schemas.IntSchema
            updated_at = schemas.IntSchema
            
            
            class signed_up_at(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'signed_up_at':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class last_seen_at(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'last_seen_at':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class last_replied_at(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'last_replied_at':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class last_contacted_at(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'last_contacted_at':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class last_email_opened_at(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'last_email_opened_at':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class last_email_clicked_at(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'last_email_clicked_at':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class language_override(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'language_override':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class browser(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'browser':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class browser_version(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'browser_version':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class browser_language(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'browser_language':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class os(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'os':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class android_app_name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'android_app_name':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class android_app_version(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'android_app_version':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class android_device(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'android_device':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class android_os_version(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'android_os_version':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class android_sdk_version(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'android_sdk_version':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class android_last_seen_at(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'android_last_seen_at':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class ios_app_name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ios_app_name':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class ios_app_version(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ios_app_version':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class ios_device(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ios_device':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class ios_os_version(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ios_os_version':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class ios_sdk_version(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ios_sdk_version':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class ios_last_seen_at(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ios_last_seen_at':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            custom_attributes = schemas.DictSchema
            
            
            class avatar(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        type = schemas.StrSchema
                        
                        
                        class image_url(
                            schemas.StrBase,
                            schemas.NoneBase,
                            schemas.Schema,
                            schemas.NoneStrMixin
                        ):
                        
                        
                            class MetaOapg:
                                format = 'uri'
                        
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[None, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'image_url':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                )
                        __annotations__ = {
                            "type": type,
                            "image_url": image_url,
                        }
            
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["image_url"]) -> MetaOapg.properties.image_url: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "image_url", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["image_url"]) -> typing.Union[MetaOapg.properties.image_url, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "image_url", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, None, ],
                    type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                    image_url: typing.Union[MetaOapg.properties.image_url, None, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'avatar':
                    return super().__new__(
                        cls,
                        *_args,
                        type=type,
                        image_url=image_url,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def tags() -> typing.Type['ContactTags']:
                return ContactTags
        
            @staticmethod
            def notes() -> typing.Type['ContactNotes']:
                return ContactNotes
        
            @staticmethod
            def companies() -> typing.Type['ContactCompanies']:
                return ContactCompanies
        
            @staticmethod
            def location() -> typing.Type['ContactLocation']:
                return ContactLocation
        
            @staticmethod
            def social_profiles() -> typing.Type['ContactSocialProfiles']:
                return ContactSocialProfiles
            __annotations__ = {
                "type": type,
                "id": id,
                "workspace_id": workspace_id,
                "role": role,
                "email": email,
                "phone": phone,
                "formatted_phone": formatted_phone,
                "name": name,
                "owner_id": owner_id,
                "has_hard_bounced": has_hard_bounced,
                "marked_email_as_spam": marked_email_as_spam,
                "unsubscribed_from_emails": unsubscribed_from_emails,
                "created_at": created_at,
                "updated_at": updated_at,
                "signed_up_at": signed_up_at,
                "last_seen_at": last_seen_at,
                "last_replied_at": last_replied_at,
                "last_contacted_at": last_contacted_at,
                "last_email_opened_at": last_email_opened_at,
                "last_email_clicked_at": last_email_clicked_at,
                "language_override": language_override,
                "browser": browser,
                "browser_version": browser_version,
                "browser_language": browser_language,
                "os": os,
                "android_app_name": android_app_name,
                "android_app_version": android_app_version,
                "android_device": android_device,
                "android_os_version": android_os_version,
                "android_sdk_version": android_sdk_version,
                "android_last_seen_at": android_last_seen_at,
                "ios_app_name": ios_app_name,
                "ios_app_version": ios_app_version,
                "ios_device": ios_device,
                "ios_os_version": ios_os_version,
                "ios_sdk_version": ios_sdk_version,
                "ios_last_seen_at": ios_last_seen_at,
                "custom_attributes": custom_attributes,
                "avatar": avatar,
                "tags": tags,
                "notes": notes,
                "companies": companies,
                "location": location,
                "social_profiles": social_profiles,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workspace_id"]) -> MetaOapg.properties.workspace_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["role"]) -> MetaOapg.properties.role: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phone"]) -> MetaOapg.properties.phone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["formatted_phone"]) -> MetaOapg.properties.formatted_phone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner_id"]) -> MetaOapg.properties.owner_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_hard_bounced"]) -> MetaOapg.properties.has_hard_bounced: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["marked_email_as_spam"]) -> MetaOapg.properties.marked_email_as_spam: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unsubscribed_from_emails"]) -> MetaOapg.properties.unsubscribed_from_emails: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signed_up_at"]) -> MetaOapg.properties.signed_up_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_seen_at"]) -> MetaOapg.properties.last_seen_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_replied_at"]) -> MetaOapg.properties.last_replied_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_contacted_at"]) -> MetaOapg.properties.last_contacted_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_email_opened_at"]) -> MetaOapg.properties.last_email_opened_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_email_clicked_at"]) -> MetaOapg.properties.last_email_clicked_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["language_override"]) -> MetaOapg.properties.language_override: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["browser"]) -> MetaOapg.properties.browser: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["browser_version"]) -> MetaOapg.properties.browser_version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["browser_language"]) -> MetaOapg.properties.browser_language: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["os"]) -> MetaOapg.properties.os: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["android_app_name"]) -> MetaOapg.properties.android_app_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["android_app_version"]) -> MetaOapg.properties.android_app_version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["android_device"]) -> MetaOapg.properties.android_device: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["android_os_version"]) -> MetaOapg.properties.android_os_version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["android_sdk_version"]) -> MetaOapg.properties.android_sdk_version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["android_last_seen_at"]) -> MetaOapg.properties.android_last_seen_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ios_app_name"]) -> MetaOapg.properties.ios_app_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ios_app_version"]) -> MetaOapg.properties.ios_app_version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ios_device"]) -> MetaOapg.properties.ios_device: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ios_os_version"]) -> MetaOapg.properties.ios_os_version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ios_sdk_version"]) -> MetaOapg.properties.ios_sdk_version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ios_last_seen_at"]) -> MetaOapg.properties.ios_last_seen_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_attributes"]) -> MetaOapg.properties.custom_attributes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["avatar"]) -> MetaOapg.properties.avatar: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> 'ContactTags': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notes"]) -> 'ContactNotes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companies"]) -> 'ContactCompanies': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location"]) -> 'ContactLocation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["social_profiles"]) -> 'ContactSocialProfiles': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "id", "workspace_id", "role", "email", "phone", "formatted_phone", "name", "owner_id", "has_hard_bounced", "marked_email_as_spam", "unsubscribed_from_emails", "created_at", "updated_at", "signed_up_at", "last_seen_at", "last_replied_at", "last_contacted_at", "last_email_opened_at", "last_email_clicked_at", "language_override", "browser", "browser_version", "browser_language", "os", "android_app_name", "android_app_version", "android_device", "android_os_version", "android_sdk_version", "android_last_seen_at", "ios_app_name", "ios_app_version", "ios_device", "ios_os_version", "ios_sdk_version", "ios_last_seen_at", "custom_attributes", "avatar", "tags", "notes", "companies", "location", "social_profiles", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workspace_id"]) -> typing.Union[MetaOapg.properties.workspace_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["role"]) -> typing.Union[MetaOapg.properties.role, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phone"]) -> typing.Union[MetaOapg.properties.phone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["formatted_phone"]) -> typing.Union[MetaOapg.properties.formatted_phone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner_id"]) -> typing.Union[MetaOapg.properties.owner_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_hard_bounced"]) -> typing.Union[MetaOapg.properties.has_hard_bounced, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["marked_email_as_spam"]) -> typing.Union[MetaOapg.properties.marked_email_as_spam, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unsubscribed_from_emails"]) -> typing.Union[MetaOapg.properties.unsubscribed_from_emails, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> typing.Union[MetaOapg.properties.updated_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signed_up_at"]) -> typing.Union[MetaOapg.properties.signed_up_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_seen_at"]) -> typing.Union[MetaOapg.properties.last_seen_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_replied_at"]) -> typing.Union[MetaOapg.properties.last_replied_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_contacted_at"]) -> typing.Union[MetaOapg.properties.last_contacted_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_email_opened_at"]) -> typing.Union[MetaOapg.properties.last_email_opened_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_email_clicked_at"]) -> typing.Union[MetaOapg.properties.last_email_clicked_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["language_override"]) -> typing.Union[MetaOapg.properties.language_override, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["browser"]) -> typing.Union[MetaOapg.properties.browser, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["browser_version"]) -> typing.Union[MetaOapg.properties.browser_version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["browser_language"]) -> typing.Union[MetaOapg.properties.browser_language, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["os"]) -> typing.Union[MetaOapg.properties.os, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["android_app_name"]) -> typing.Union[MetaOapg.properties.android_app_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["android_app_version"]) -> typing.Union[MetaOapg.properties.android_app_version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["android_device"]) -> typing.Union[MetaOapg.properties.android_device, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["android_os_version"]) -> typing.Union[MetaOapg.properties.android_os_version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["android_sdk_version"]) -> typing.Union[MetaOapg.properties.android_sdk_version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["android_last_seen_at"]) -> typing.Union[MetaOapg.properties.android_last_seen_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ios_app_name"]) -> typing.Union[MetaOapg.properties.ios_app_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ios_app_version"]) -> typing.Union[MetaOapg.properties.ios_app_version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ios_device"]) -> typing.Union[MetaOapg.properties.ios_device, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ios_os_version"]) -> typing.Union[MetaOapg.properties.ios_os_version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ios_sdk_version"]) -> typing.Union[MetaOapg.properties.ios_sdk_version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ios_last_seen_at"]) -> typing.Union[MetaOapg.properties.ios_last_seen_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_attributes"]) -> typing.Union[MetaOapg.properties.custom_attributes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["avatar"]) -> typing.Union[MetaOapg.properties.avatar, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union['ContactTags', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notes"]) -> typing.Union['ContactNotes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companies"]) -> typing.Union['ContactCompanies', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> typing.Union['ContactLocation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["social_profiles"]) -> typing.Union['ContactSocialProfiles', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "id", "workspace_id", "role", "email", "phone", "formatted_phone", "name", "owner_id", "has_hard_bounced", "marked_email_as_spam", "unsubscribed_from_emails", "created_at", "updated_at", "signed_up_at", "last_seen_at", "last_replied_at", "last_contacted_at", "last_email_opened_at", "last_email_clicked_at", "language_override", "browser", "browser_version", "browser_language", "os", "android_app_name", "android_app_version", "android_device", "android_os_version", "android_sdk_version", "android_last_seen_at", "ios_app_name", "ios_app_version", "ios_device", "ios_os_version", "ios_sdk_version", "ios_last_seen_at", "custom_attributes", "avatar", "tags", "notes", "companies", "location", "social_profiles", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        workspace_id: typing.Union[MetaOapg.properties.workspace_id, str, schemas.Unset] = schemas.unset,
        role: typing.Union[MetaOapg.properties.role, str, schemas.Unset] = schemas.unset,
        email: typing.Union[MetaOapg.properties.email, str, schemas.Unset] = schemas.unset,
        phone: typing.Union[MetaOapg.properties.phone, None, str, schemas.Unset] = schemas.unset,
        formatted_phone: typing.Union[MetaOapg.properties.formatted_phone, None, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, None, str, schemas.Unset] = schemas.unset,
        owner_id: typing.Union[MetaOapg.properties.owner_id, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        has_hard_bounced: typing.Union[MetaOapg.properties.has_hard_bounced, bool, schemas.Unset] = schemas.unset,
        marked_email_as_spam: typing.Union[MetaOapg.properties.marked_email_as_spam, bool, schemas.Unset] = schemas.unset,
        unsubscribed_from_emails: typing.Union[MetaOapg.properties.unsubscribed_from_emails, bool, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        updated_at: typing.Union[MetaOapg.properties.updated_at, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        signed_up_at: typing.Union[MetaOapg.properties.signed_up_at, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        last_seen_at: typing.Union[MetaOapg.properties.last_seen_at, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        last_replied_at: typing.Union[MetaOapg.properties.last_replied_at, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        last_contacted_at: typing.Union[MetaOapg.properties.last_contacted_at, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        last_email_opened_at: typing.Union[MetaOapg.properties.last_email_opened_at, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        last_email_clicked_at: typing.Union[MetaOapg.properties.last_email_clicked_at, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        language_override: typing.Union[MetaOapg.properties.language_override, None, str, schemas.Unset] = schemas.unset,
        browser: typing.Union[MetaOapg.properties.browser, None, str, schemas.Unset] = schemas.unset,
        browser_version: typing.Union[MetaOapg.properties.browser_version, None, str, schemas.Unset] = schemas.unset,
        browser_language: typing.Union[MetaOapg.properties.browser_language, None, str, schemas.Unset] = schemas.unset,
        os: typing.Union[MetaOapg.properties.os, None, str, schemas.Unset] = schemas.unset,
        android_app_name: typing.Union[MetaOapg.properties.android_app_name, None, str, schemas.Unset] = schemas.unset,
        android_app_version: typing.Union[MetaOapg.properties.android_app_version, None, str, schemas.Unset] = schemas.unset,
        android_device: typing.Union[MetaOapg.properties.android_device, None, str, schemas.Unset] = schemas.unset,
        android_os_version: typing.Union[MetaOapg.properties.android_os_version, None, str, schemas.Unset] = schemas.unset,
        android_sdk_version: typing.Union[MetaOapg.properties.android_sdk_version, None, str, schemas.Unset] = schemas.unset,
        android_last_seen_at: typing.Union[MetaOapg.properties.android_last_seen_at, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ios_app_name: typing.Union[MetaOapg.properties.ios_app_name, None, str, schemas.Unset] = schemas.unset,
        ios_app_version: typing.Union[MetaOapg.properties.ios_app_version, None, str, schemas.Unset] = schemas.unset,
        ios_device: typing.Union[MetaOapg.properties.ios_device, None, str, schemas.Unset] = schemas.unset,
        ios_os_version: typing.Union[MetaOapg.properties.ios_os_version, None, str, schemas.Unset] = schemas.unset,
        ios_sdk_version: typing.Union[MetaOapg.properties.ios_sdk_version, None, str, schemas.Unset] = schemas.unset,
        ios_last_seen_at: typing.Union[MetaOapg.properties.ios_last_seen_at, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        custom_attributes: typing.Union[MetaOapg.properties.custom_attributes, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        avatar: typing.Union[MetaOapg.properties.avatar, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
        tags: typing.Union['ContactTags', schemas.Unset] = schemas.unset,
        notes: typing.Union['ContactNotes', schemas.Unset] = schemas.unset,
        companies: typing.Union['ContactCompanies', schemas.Unset] = schemas.unset,
        location: typing.Union['ContactLocation', schemas.Unset] = schemas.unset,
        social_profiles: typing.Union['ContactSocialProfiles', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Contact':
        return super().__new__(
            cls,
            *_args,
            type=type,
            id=id,
            workspace_id=workspace_id,
            role=role,
            email=email,
            phone=phone,
            formatted_phone=formatted_phone,
            name=name,
            owner_id=owner_id,
            has_hard_bounced=has_hard_bounced,
            marked_email_as_spam=marked_email_as_spam,
            unsubscribed_from_emails=unsubscribed_from_emails,
            created_at=created_at,
            updated_at=updated_at,
            signed_up_at=signed_up_at,
            last_seen_at=last_seen_at,
            last_replied_at=last_replied_at,
            last_contacted_at=last_contacted_at,
            last_email_opened_at=last_email_opened_at,
            last_email_clicked_at=last_email_clicked_at,
            language_override=language_override,
            browser=browser,
            browser_version=browser_version,
            browser_language=browser_language,
            os=os,
            android_app_name=android_app_name,
            android_app_version=android_app_version,
            android_device=android_device,
            android_os_version=android_os_version,
            android_sdk_version=android_sdk_version,
            android_last_seen_at=android_last_seen_at,
            ios_app_name=ios_app_name,
            ios_app_version=ios_app_version,
            ios_device=ios_device,
            ios_os_version=ios_os_version,
            ios_sdk_version=ios_sdk_version,
            ios_last_seen_at=ios_last_seen_at,
            custom_attributes=custom_attributes,
            avatar=avatar,
            tags=tags,
            notes=notes,
            companies=companies,
            location=location,
            social_profiles=social_profiles,
            _configuration=_configuration,
            **kwargs,
        )

from intercom_python_api.model.contact_companies import ContactCompanies
from intercom_python_api.model.contact_location import ContactLocation
from intercom_python_api.model.contact_notes import ContactNotes
from intercom_python_api.model.contact_social_profiles import ContactSocialProfiles
from intercom_python_api.model.contact_tags import ContactTags
