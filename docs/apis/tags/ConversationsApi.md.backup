<a name="__pageTop"></a>
# intercom_python_api.apis.tags.conversations_api.ConversationsApi

All URIs are relative to *https://api.intercom.io*

Method | HTTP request | Description
------------- | ------------- | -------------
[**attach_contact_to_conversation**](#attach_contact_to_conversation) | **post** /conversations/{id}/customers | Attach a contact to a conversation
[**attach_tag_to_conversation**](#attach_tag_to_conversation) | **post** /conversations/{conversation_id}/tags | Add tag to a conversation
[**auto_assign_conversation**](#auto_assign_conversation) | **post** /conversations/{id}/run_assignment_rules | Run Assignment Rules on a conversation
[**create_conversation**](#create_conversation) | **post** /conversations | Creates a conversation
[**detach_contact_from_conversation**](#detach_contact_from_conversation) | **delete** /conversations/{conversation_id}/customers/{contact_id} | Detach a contact from a group conversation
[**detach_tag_from_conversation**](#detach_tag_from_conversation) | **delete** /conversations/{conversation_id}/tags/{id} | Remove tag from a conversation
[**list_conversations**](#list_conversations) | **get** /conversations | List all conversations
[**manage_conversation**](#manage_conversation) | **post** /conversations/{id}/parts | Manage a conversation
[**redact_conversation**](#redact_conversation) | **post** /conversations/redact | Redact a conversation part
[**reply_conversation**](#reply_conversation) | **post** /conversations/{id}/reply | Reply to a conversation
[**retrieve_conversation**](#retrieve_conversation) | **get** /conversations/{id} | Retrieve a conversation
[**search_conversations**](#search_conversations) | **post** /conversations/search | Search conversations
[**update_conversation**](#update_conversation) | **put** /conversations/{id} | Update a conversation

# **attach_contact_to_conversation**
<a name="attach_contact_to_conversation"></a>
> Conversation attach_contact_to_conversation(id)

Attach a contact to a conversation

You can add participants who are contacts to a conversation, on behalf of either another contact or an admin.  > ðŸš§ Note about contacts without an email > > If you add a contact via the email parameter and there is no user/lead found on that workspace with he given email, then we will create a new contact with `role` set to `lead`.  

### Example

Bearer Authentication (bearerAuth):

```python
import intercom_python_api import Intercom
from intercom_python_api.apis.tags import conversations_api
from intercom_python_api.model.conversation import Conversation
from intercom_python_api.model.intercom_version import IntercomVersion
from intercom_python_api.model.attach_contact_to_conversation_request import AttachContactToConversationRequest
from intercom_python_api.model.error import Error


# Create an Intercom client context.
intercom = Intercom(api_key='<YOUR API TOKEN>')
```

An example of an API call passing only required parameters which have no default value:

```python
    path_params = {
        'id': "123",
    }
    header_params = {
    }
    try:
        # Attach a contact to a conversation
        api_response = intercom.ConversationsApi.attach_contact_to_conversation(
            path_params=path_params,
            header_params=header_params,
        )
        pprint(api_response)
    except intercom_python_api.ApiException as e:
        print("Exception when calling ConversationsApi->attach_contact_to_conversation: %s\n" % e)

```

An example passing **only** the optional values (like `Intercom-Version`):

```python
    path_params = {
        'id': "123",
    }
    header_params = {
        'Intercom-Version': IntercomVersion("Unstable"),
    }
    body = AttachContactToConversationRequest(
        admin_id="12345",
        customer=dict(),
    )
    try:
        # Attach a contact to a conversation
        api_response = intercom.ConversationsApi.attach_contact_to_conversation(
            path_params=path_params,
            header_params=header_params,
            body=body,
        )
        pprint(api_response)
    except intercom_python_api.ApiException as e:
        print("Exception when calling ConversationsApi->attach_contact_to_conversation: %s\n" % e)

```
### Parameters

Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
body | typing.Union[SchemaForRequestBodyApplicationJson, Unset] | optional, default is unset |
header_params | RequestHeaderParams | |
path_params | RequestPathParams | |
content_type | str | optional, default is 'application/json' | Selects the schema and serialization of the request body
accept_content_types | typing.Tuple[str] | default is ('application/json', ) | Tells the server the content type(s) that are accepted by the client
stream | bool | default is False | if True then the response.content will be streamed and loaded from a file like object. When downloading a file, set this to True to force the code to deserialize the content to a FileSchema file
timeout | typing.Optional[typing.Union[int, typing.Tuple]] | default is None | the timeout used by the rest client
skip_deserialization | bool | default is False | when True, headers and body will be unset and an instance of api_client.ApiResponseWithoutDeserialization will be returned

### body

# SchemaForRequestBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**AttachContactToConversationRequest**](../../models/AttachContactToConversationRequest.md) |  | 


### header_params
#### RequestHeaderParams

Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
Intercom-Version | IntercomVersionSchema | | optional

# IntercomVersionSchema
Type | Description  | Notes
------------- | ------------- | -------------
[**IntercomVersion**](../../models/IntercomVersion.md) |  | 


### path_params
#### RequestPathParams

Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
id | IdSchema | | 

# IdSchema

## Model Type Info
Input Type | Accessed Type | Description | Notes
------------ | ------------- | ------------- | -------------
str,  | str,  |  | 

### Return Types, Responses

Code | Class | Description
------------- | ------------- | -------------
n/a | api_client.ApiResponseWithoutDeserialization | When skip_deserialization is True this response is returned
200 | [ApiResponseFor200](#attach_contact_to_conversation.ApiResponseFor200) | Attach a contact to a conversation
404 | [ApiResponseFor404](#attach_contact_to_conversation.ApiResponseFor404) | Not found
401 | [ApiResponseFor401](#attach_contact_to_conversation.ApiResponseFor401) | Unauthorized
403 | [ApiResponseFor403](#attach_contact_to_conversation.ApiResponseFor403) | API plan restricted

#### attach_contact_to_conversation.ApiResponseFor200
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor200ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor200ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Conversation**](../../models/Conversation.md) |  | 


#### attach_contact_to_conversation.ApiResponseFor404
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor404ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor404ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Error**](../../models/Error.md) |  | 


#### attach_contact_to_conversation.ApiResponseFor401
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor401ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor401ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Error**](../../models/Error.md) |  | 


#### attach_contact_to_conversation.ApiResponseFor403
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor403ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor403ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Error**](../../models/Error.md) |  | 


### Authorization

[bearerAuth](../../../README.md#bearerAuth)

[[Back to top]](#__pageTop) [[Back to API list]](../../../README.md#documentation-for-api-endpoints) [[Back to Model list]](../../../README.md#documentation-for-models) [[Back to README]](../../../README.md)

# **attach_tag_to_conversation**
<a name="attach_tag_to_conversation"></a>
> Tag attach_tag_to_conversation(conversation_id)

Add tag to a conversation

You can tag a specific conversation. This will return a tag object for the tag that was added to the conversation.

### Example

* Bearer Authentication (bearerAuth):
```python
import intercom_python_api import Intercom
from intercom_python_api.apis.tags import conversations_api
from intercom_python_api.model.tag import Tag
from intercom_python_api.model.intercom_version import IntercomVersion
from intercom_python_api.model.error import Error

# Create an Intercom client context.
intercom = Intercom(api_key='<YOUR API TOKEN>')
```

An example of an API call passing only required parameters which have no default value:

```python
    path_params = {
        'conversation_id': "64619700005694",
    }
    header_params = {
    }
    try:
        # Add tag to a conversation
        api_response = intercom.ConversationsApi.attach_tag_to_conversation(
            path_params=path_params,
            header_params=header_params,
        )
        pprint(api_response)
    except intercom_python_api.ApiException as e:
        print("Exception when calling ConversationsApi->attach_tag_to_conversation: %s\n" % e)

```

An example passing **only** the optional values (like `Intercom-Version`):

```python
    path_params = {
        'conversation_id': "64619700005694",
    }
    header_params = {
        'Intercom-Version': IntercomVersion("Unstable"),
    }
    body = dict(
        id="7522907",
        admin_id="780",
    )
    try:
        # Add tag to a conversation
        api_response = intercom.ConversationsApi.attach_tag_to_conversation(
            path_params=path_params,
            header_params=header_params,
            body=body,
        )
        pprint(api_response)
    except intercom_python_api.ApiException as e:
        print("Exception when calling ConversationsApi->attach_tag_to_conversation: %s\n" % e)

```
### Parameters

Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
body | typing.Union[SchemaForRequestBodyApplicationJson, Unset] | optional, default is unset |
header_params | RequestHeaderParams | |
path_params | RequestPathParams | |
content_type | str | optional, default is 'application/json' | Selects the schema and serialization of the request body
accept_content_types | typing.Tuple[str] | default is ('application/json', ) | Tells the server the content type(s) that are accepted by the client
stream | bool | default is False | if True then the response.content will be streamed and loaded from a file like object. When downloading a file, set this to True to force the code to deserialize the content to a FileSchema file
timeout | typing.Optional[typing.Union[int, typing.Tuple]] | default is None | the timeout used by the rest client
skip_deserialization | bool | default is False | when True, headers and body will be unset and an instance of api_client.ApiResponseWithoutDeserialization will be returned

### body

# SchemaForRequestBodyApplicationJson

## Model Type Info
Input Type | Accessed Type | Description | Notes
------------ | ------------- | ------------- | -------------
dict, frozendict.frozendict,  | frozendict.frozendict,  |  | 

### Dictionary Keys
Key | Input Type | Accessed Type | Description | Notes
------------ | ------------- | ------------- | ------------- | -------------
**admin_id** | str,  | str,  | The unique identifier for the admin which is given by Intercom. | 
**id** | str,  | str,  | The unique identifier for the tag which is given by Intercom | 
**any_string_name** | dict, frozendict.frozendict, str, date, datetime, int, float, bool, decimal.Decimal, None, list, tuple, bytes, io.FileIO, io.BufferedReader | frozendict.frozendict, str, BoolClass, decimal.Decimal, NoneClass, tuple, bytes, FileIO | any string name can be used but the value must be the correct type | [optional]

### header_params
#### RequestHeaderParams

Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
Intercom-Version | IntercomVersionSchema | | optional

# IntercomVersionSchema
Type | Description  | Notes
------------- | ------------- | -------------
[**IntercomVersion**](../../models/IntercomVersion.md) |  | 


### path_params
#### RequestPathParams

Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
conversation_id | ConversationIdSchema | | 

# ConversationIdSchema

## Model Type Info
Input Type | Accessed Type | Description | Notes
------------ | ------------- | ------------- | -------------
str,  | str,  |  | 

### Return Types, Responses

Code | Class | Description
------------- | ------------- | -------------
n/a | api_client.ApiResponseWithoutDeserialization | When skip_deserialization is True this response is returned
200 | [ApiResponseFor200](#attach_tag_to_conversation.ApiResponseFor200) | successful
404 | [ApiResponseFor404](#attach_tag_to_conversation.ApiResponseFor404) | Conversation not found
401 | [ApiResponseFor401](#attach_tag_to_conversation.ApiResponseFor401) | Unauthorized

#### attach_tag_to_conversation.ApiResponseFor200
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor200ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor200ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Tag**](../../models/Tag.md) |  | 


#### attach_tag_to_conversation.ApiResponseFor404
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor404ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor404ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Error**](../../models/Error.md) |  | 


#### attach_tag_to_conversation.ApiResponseFor401
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor401ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor401ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Error**](../../models/Error.md) |  | 


### Authorization

[bearerAuth](../../../README.md#bearerAuth)

[[Back to top]](#__pageTop) [[Back to API list]](../../../README.md#documentation-for-api-endpoints) [[Back to Model list]](../../../README.md#documentation-for-models) [[Back to README]](../../../README.md)

# **auto_assign_conversation**
<a name="auto_assign_conversation"></a>
> Conversation auto_assign_conversation(id)

Run Assignment Rules on a conversation

You can let a conversation be automatically assigned following assignment rules.

### Example

* Bearer Authentication (bearerAuth):
```python
import intercom_python_api import Intercom
from intercom_python_api.apis.tags import conversations_api
from intercom_python_api.model.conversation import Conversation
from intercom_python_api.model.intercom_version import IntercomVersion
from intercom_python_api.model.error import Error

# Create an Intercom client context.
intercom = Intercom(api_key='<YOUR API TOKEN>')
```

An example of an API call passing only required parameters which have no default value:

```python
    path_params = {
        'id': "123",
    }
    header_params = {
    }
    try:
        # Run Assignment Rules on a conversation
        api_response = intercom.ConversationsApi.auto_assign_conversation(
            path_params=path_params,
            header_params=header_params,
        )
        pprint(api_response)
    except intercom_python_api.ApiException as e:
        print("Exception when calling ConversationsApi->auto_assign_conversation: %s\n" % e)

```

An example passing **only** the optional values (like `Intercom-Version`):

```python
    path_params = {
        'id': "123",
    }
    header_params = {
        'Intercom-Version': IntercomVersion("Unstable"),
    }
    try:
        # Run Assignment Rules on a conversation
        api_response = intercom.ConversationsApi.auto_assign_conversation(
            path_params=path_params,
            header_params=header_params,
        )
        pprint(api_response)
    except intercom_python_api.ApiException as e:
        print("Exception when calling ConversationsApi->auto_assign_conversation: %s\n" % e)

```
### Parameters

Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
header_params | RequestHeaderParams | |
path_params | RequestPathParams | |
accept_content_types | typing.Tuple[str] | default is ('application/json', ) | Tells the server the content type(s) that are accepted by the client
stream | bool | default is False | if True then the response.content will be streamed and loaded from a file like object. When downloading a file, set this to True to force the code to deserialize the content to a FileSchema file
timeout | typing.Optional[typing.Union[int, typing.Tuple]] | default is None | the timeout used by the rest client
skip_deserialization | bool | default is False | when True, headers and body will be unset and an instance of api_client.ApiResponseWithoutDeserialization will be returned

### header_params
#### RequestHeaderParams

Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
Intercom-Version | IntercomVersionSchema | | optional

# IntercomVersionSchema
Type | Description  | Notes
------------- | ------------- | -------------
[**IntercomVersion**](../../models/IntercomVersion.md) |  | 


### path_params
#### RequestPathParams

Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
id | IdSchema | | 

# IdSchema

## Model Type Info
Input Type | Accessed Type | Description | Notes
------------ | ------------- | ------------- | -------------
str,  | str,  |  | 

### Return Types, Responses

Code | Class | Description
------------- | ------------- | -------------
n/a | api_client.ApiResponseWithoutDeserialization | When skip_deserialization is True this response is returned
200 | [ApiResponseFor200](#auto_assign_conversation.ApiResponseFor200) | Assign a conversation using assignment rules
404 | [ApiResponseFor404](#auto_assign_conversation.ApiResponseFor404) | Not found
401 | [ApiResponseFor401](#auto_assign_conversation.ApiResponseFor401) | Unauthorized
403 | [ApiResponseFor403](#auto_assign_conversation.ApiResponseFor403) | API plan restricted

#### auto_assign_conversation.ApiResponseFor200
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor200ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor200ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Conversation**](../../models/Conversation.md) |  | 


#### auto_assign_conversation.ApiResponseFor404
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor404ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor404ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Error**](../../models/Error.md) |  | 


#### auto_assign_conversation.ApiResponseFor401
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor401ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor401ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Error**](../../models/Error.md) |  | 


#### auto_assign_conversation.ApiResponseFor403
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor403ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor403ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Error**](../../models/Error.md) |  | 


### Authorization

[bearerAuth](../../../README.md#bearerAuth)

[[Back to top]](#__pageTop) [[Back to API list]](../../../README.md#documentation-for-api-endpoints) [[Back to Model list]](../../../README.md#documentation-for-models) [[Back to README]](../../../README.md)

# **create_conversation**
<a name="create_conversation"></a>
> Message create_conversation()

Creates a conversation

You can create a conversation that has been initiated by a contact (ie. user or lead). The conversation can be an in-app message only.  > ðŸ“˜ Sending for visitors > > You can also send a message from a visitor by specifying their `user_id` or `id` value in the `from` field, along with a `type` field value of `contact`. > This visitor will be automatically converted to a contact with a lead role once the conversation is created.  This will return the Message model that has been created.  

### Example

* Bearer Authentication (bearerAuth):
```python
import intercom_python_api import Intercom
from intercom_python_api.apis.tags import conversations_api
from intercom_python_api.model.message import Message
from intercom_python_api.model.create_conversation_request import CreateConversationRequest
from intercom_python_api.model.intercom_version import IntercomVersion
from intercom_python_api.model.error import Error

# Create an Intercom client context.
intercom = Intercom(api_key='<YOUR API TOKEN>')

```

An example passing **only** the optional values (like `Intercom-Version`):

```python
    header_params = {
        'Intercom-Version': IntercomVersion("Unstable"),
    }
    body = CreateConversationRequest(
        _from=dict(
            type="user",
            id="id_example",
        ),
        body="Hello",
    )
    try:
        # Creates a conversation
        api_response = intercom.ConversationsApi.create_conversation(
            header_params=header_params,
            body=body,
        )
        pprint(api_response)
    except intercom_python_api.ApiException as e:
        print("Exception when calling ConversationsApi->create_conversation: %s\n" % e)

```
### Parameters

Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
body | typing.Union[SchemaForRequestBodyApplicationJson, Unset] | optional, default is unset |
header_params | RequestHeaderParams | |
content_type | str | optional, default is 'application/json' | Selects the schema and serialization of the request body
accept_content_types | typing.Tuple[str] | default is ('application/json', ) | Tells the server the content type(s) that are accepted by the client
stream | bool | default is False | if True then the response.content will be streamed and loaded from a file like object. When downloading a file, set this to True to force the code to deserialize the content to a FileSchema file
timeout | typing.Optional[typing.Union[int, typing.Tuple]] | default is None | the timeout used by the rest client
skip_deserialization | bool | default is False | when True, headers and body will be unset and an instance of api_client.ApiResponseWithoutDeserialization will be returned

### body

# SchemaForRequestBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**CreateConversationRequest**](../../models/CreateConversationRequest.md) |  | 


### header_params
#### RequestHeaderParams

Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
Intercom-Version | IntercomVersionSchema | | optional

# IntercomVersionSchema
Type | Description  | Notes
------------- | ------------- | -------------
[**IntercomVersion**](../../models/IntercomVersion.md) |  | 


### Return Types, Responses

Code | Class | Description
------------- | ------------- | -------------
n/a | api_client.ApiResponseWithoutDeserialization | When skip_deserialization is True this response is returned
200 | [ApiResponseFor200](#create_conversation.ApiResponseFor200) | conversation created
404 | [ApiResponseFor404](#create_conversation.ApiResponseFor404) | Contact Not Found
401 | [ApiResponseFor401](#create_conversation.ApiResponseFor401) | Unauthorized
403 | [ApiResponseFor403](#create_conversation.ApiResponseFor403) | API plan restricted

#### create_conversation.ApiResponseFor200
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor200ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor200ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Message**](../../models/Message.md) |  | 


#### create_conversation.ApiResponseFor404
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor404ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor404ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Error**](../../models/Error.md) |  | 


#### create_conversation.ApiResponseFor401
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor401ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor401ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Error**](../../models/Error.md) |  | 


#### create_conversation.ApiResponseFor403
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor403ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor403ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Error**](../../models/Error.md) |  | 


### Authorization

[bearerAuth](../../../README.md#bearerAuth)

[[Back to top]](#__pageTop) [[Back to API list]](../../../README.md#documentation-for-api-endpoints) [[Back to Model list]](../../../README.md#documentation-for-models) [[Back to README]](../../../README.md)

# **detach_contact_from_conversation**
<a name="detach_contact_from_conversation"></a>
> Conversation detach_contact_from_conversation(conversation_idcontact_id)

Detach a contact from a group conversation

You can add participants who are contacts to a conversation, on behalf of either another contact or an admin.  > ðŸš§ Note about contacts without an email > > If you add a contact via the email parameter and there is no user/lead found on that workspace with he given email, then we will create a new contact with `role` set to `lead`.  

### Example

* Bearer Authentication (bearerAuth):
```python
import intercom_python_api import Intercom
from intercom_python_api.apis.tags import conversations_api
from intercom_python_api.model.conversation import Conversation
from intercom_python_api.model.detach_contact_from_conversation_request import DetachContactFromConversationRequest
from intercom_python_api.model.intercom_version import IntercomVersion
from intercom_python_api.model.error import Error

# Create an Intercom client context.
intercom = Intercom(api_key='<YOUR API TOKEN>')
```

An example of an API call passing only required parameters which have no default value:

```python
    path_params = {
        'conversation_id': "123",
        'contact_id': "123",
    }
    header_params = {
    }
    try:
        # Detach a contact from a group conversation
        api_response = intercom.ConversationsApi.detach_contact_from_conversation(
            path_params=path_params,
            header_params=header_params,
        )
        pprint(api_response)
    except intercom_python_api.ApiException as e:
        print("Exception when calling ConversationsApi->detach_contact_from_conversation: %s\n" % e)

```

An example passing **only** the optional values (like `Intercom-Version`):

```python
    path_params = {
        'conversation_id': "123",
        'contact_id': "123",
    }
    header_params = {
        'Intercom-Version': IntercomVersion("Unstable"),
    }
    body = DetachContactFromConversationRequest(None)
    try:
        # Detach a contact from a group conversation
        api_response = intercom.ConversationsApi.detach_contact_from_conversation(
            path_params=path_params,
            header_params=header_params,
            body=body,
        )
        pprint(api_response)
    except intercom_python_api.ApiException as e:
        print("Exception when calling ConversationsApi->detach_contact_from_conversation: %s\n" % e)

```
### Parameters

Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
body | typing.Union[SchemaForRequestBodyApplicationJson, Unset] | optional, default is unset |
header_params | RequestHeaderParams | |
path_params | RequestPathParams | |
content_type | str | optional, default is 'application/json' | Selects the schema and serialization of the request body
accept_content_types | typing.Tuple[str] | default is ('application/json', ) | Tells the server the content type(s) that are accepted by the client
stream | bool | default is False | if True then the response.content will be streamed and loaded from a file like object. When downloading a file, set this to True to force the code to deserialize the content to a FileSchema file
timeout | typing.Optional[typing.Union[int, typing.Tuple]] | default is None | the timeout used by the rest client
skip_deserialization | bool | default is False | when True, headers and body will be unset and an instance of api_client.ApiResponseWithoutDeserialization will be returned

### body

# SchemaForRequestBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**DetachContactFromConversationRequest**](../../models/DetachContactFromConversationRequest.md) |  | 


### header_params
#### RequestHeaderParams

Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
Intercom-Version | IntercomVersionSchema | | optional

# IntercomVersionSchema
Type | Description  | Notes
------------- | ------------- | -------------
[**IntercomVersion**](../../models/IntercomVersion.md) |  | 


### path_params
#### RequestPathParams

Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
conversation_id | ConversationIdSchema | | 
contact_id | ContactIdSchema | | 

# ConversationIdSchema

## Model Type Info
Input Type | Accessed Type | Description | Notes
------------ | ------------- | ------------- | -------------
str,  | str,  |  | 

# ContactIdSchema

## Model Type Info
Input Type | Accessed Type | Description | Notes
------------ | ------------- | ------------- | -------------
str,  | str,  |  | 

### Return Types, Responses

Code | Class | Description
------------- | ------------- | -------------
n/a | api_client.ApiResponseWithoutDeserialization | When skip_deserialization is True this response is returned
200 | [ApiResponseFor200](#detach_contact_from_conversation.ApiResponseFor200) | Detach a contact from a group conversation
404 | [ApiResponseFor404](#detach_contact_from_conversation.ApiResponseFor404) | Contact not found
422 | [ApiResponseFor422](#detach_contact_from_conversation.ApiResponseFor422) | Last customer
401 | [ApiResponseFor401](#detach_contact_from_conversation.ApiResponseFor401) | Unauthorized
403 | [ApiResponseFor403](#detach_contact_from_conversation.ApiResponseFor403) | API plan restricted

#### detach_contact_from_conversation.ApiResponseFor200
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor200ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor200ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Conversation**](../../models/Conversation.md) |  | 


#### detach_contact_from_conversation.ApiResponseFor404
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor404ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor404ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Error**](../../models/Error.md) |  | 


#### detach_contact_from_conversation.ApiResponseFor422
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor422ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor422ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Error**](../../models/Error.md) |  | 


#### detach_contact_from_conversation.ApiResponseFor401
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor401ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor401ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Error**](../../models/Error.md) |  | 


#### detach_contact_from_conversation.ApiResponseFor403
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor403ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor403ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Error**](../../models/Error.md) |  | 


### Authorization

[bearerAuth](../../../README.md#bearerAuth)

[[Back to top]](#__pageTop) [[Back to API list]](../../../README.md#documentation-for-api-endpoints) [[Back to Model list]](../../../README.md#documentation-for-models) [[Back to README]](../../../README.md)

# **detach_tag_from_conversation**
<a name="detach_tag_from_conversation"></a>
> Tag detach_tag_from_conversation(conversation_idid)

Remove tag from a conversation

You can remove tag from a specific conversation. This will return a tag object for the tag that was removed from the conversation.

### Example

* Bearer Authentication (bearerAuth):
```python
import intercom_python_api import Intercom
from intercom_python_api.apis.tags import conversations_api
from intercom_python_api.model.tag import Tag
from intercom_python_api.model.intercom_version import IntercomVersion
from intercom_python_api.model.error import Error

# Create an Intercom client context.
intercom = Intercom(api_key='<YOUR API TOKEN>')
```

An example of an API call passing only required parameters which have no default value:

```python
    path_params = {
        'conversation_id': "64619700005694",
        'id': "7522907",
    }
    header_params = {
    }
    try:
        # Remove tag from a conversation
        api_response = intercom.ConversationsApi.detach_tag_from_conversation(
            path_params=path_params,
            header_params=header_params,
        )
        pprint(api_response)
    except intercom_python_api.ApiException as e:
        print("Exception when calling ConversationsApi->detach_tag_from_conversation: %s\n" % e)

```

An example passing **only** the optional values (like `Intercom-Version`):

```python
    path_params = {
        'conversation_id': "64619700005694",
        'id': "7522907",
    }
    header_params = {
        'Intercom-Version': IntercomVersion("Unstable"),
    }
    body = dict(
        admin_id="123",
    )
    try:
        # Remove tag from a conversation
        api_response = intercom.ConversationsApi.detach_tag_from_conversation(
            path_params=path_params,
            header_params=header_params,
            body=body,
        )
        pprint(api_response)
    except intercom_python_api.ApiException as e:
        print("Exception when calling ConversationsApi->detach_tag_from_conversation: %s\n" % e)

```
### Parameters

Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
body | typing.Union[SchemaForRequestBodyApplicationJson, Unset] | optional, default is unset |
header_params | RequestHeaderParams | |
path_params | RequestPathParams | |
content_type | str | optional, default is 'application/json' | Selects the schema and serialization of the request body
accept_content_types | typing.Tuple[str] | default is ('application/json', ) | Tells the server the content type(s) that are accepted by the client
stream | bool | default is False | if True then the response.content will be streamed and loaded from a file like object. When downloading a file, set this to True to force the code to deserialize the content to a FileSchema file
timeout | typing.Optional[typing.Union[int, typing.Tuple]] | default is None | the timeout used by the rest client
skip_deserialization | bool | default is False | when True, headers and body will be unset and an instance of api_client.ApiResponseWithoutDeserialization will be returned

### body

# SchemaForRequestBodyApplicationJson

## Model Type Info
Input Type | Accessed Type | Description | Notes
------------ | ------------- | ------------- | -------------
dict, frozendict.frozendict,  | frozendict.frozendict,  |  | 

### Dictionary Keys
Key | Input Type | Accessed Type | Description | Notes
------------ | ------------- | ------------- | ------------- | -------------
**admin_id** | str,  | str,  | The unique identifier for the admin which is given by Intercom. | 
**any_string_name** | dict, frozendict.frozendict, str, date, datetime, int, float, bool, decimal.Decimal, None, list, tuple, bytes, io.FileIO, io.BufferedReader | frozendict.frozendict, str, BoolClass, decimal.Decimal, NoneClass, tuple, bytes, FileIO | any string name can be used but the value must be the correct type | [optional]

### header_params
#### RequestHeaderParams

Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
Intercom-Version | IntercomVersionSchema | | optional

# IntercomVersionSchema
Type | Description  | Notes
------------- | ------------- | -------------
[**IntercomVersion**](../../models/IntercomVersion.md) |  | 


### path_params
#### RequestPathParams

Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
conversation_id | ConversationIdSchema | | 
id | IdSchema | | 

# ConversationIdSchema

## Model Type Info
Input Type | Accessed Type | Description | Notes
------------ | ------------- | ------------- | -------------
str,  | str,  |  | 

# IdSchema

## Model Type Info
Input Type | Accessed Type | Description | Notes
------------ | ------------- | ------------- | -------------
str,  | str,  |  | 

### Return Types, Responses

Code | Class | Description
------------- | ------------- | -------------
n/a | api_client.ApiResponseWithoutDeserialization | When skip_deserialization is True this response is returned
200 | [ApiResponseFor200](#detach_tag_from_conversation.ApiResponseFor200) | successful
404 | [ApiResponseFor404](#detach_tag_from_conversation.ApiResponseFor404) | Tag not found
401 | [ApiResponseFor401](#detach_tag_from_conversation.ApiResponseFor401) | Unauthorized

#### detach_tag_from_conversation.ApiResponseFor200
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor200ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor200ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Tag**](../../models/Tag.md) |  | 


#### detach_tag_from_conversation.ApiResponseFor404
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor404ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor404ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Error**](../../models/Error.md) |  | 


#### detach_tag_from_conversation.ApiResponseFor401
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor401ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor401ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Error**](../../models/Error.md) |  | 


### Authorization

[bearerAuth](../../../README.md#bearerAuth)

[[Back to top]](#__pageTop) [[Back to API list]](../../../README.md#documentation-for-api-endpoints) [[Back to Model list]](../../../README.md#documentation-for-models) [[Back to README]](../../../README.md)

# **list_conversations**
<a name="list_conversations"></a>
> PaginatedResponse list_conversations()

List all conversations

You can fetch a list of all conversations.  You can optionally request the result page size and the cursor to start after to fetch the result 

### Example

* Bearer Authentication (bearerAuth):
```python
import intercom_python_api import Intercom
from intercom_python_api.apis.tags import conversations_api
from intercom_python_api.model.intercom_version import IntercomVersion
from intercom_python_api.model.paginated_response import PaginatedResponse
from intercom_python_api.model.error import Error

# Create an Intercom client context.
intercom = Intercom(api_key='<YOUR API TOKEN>')

```

An example passing **only** the optional values (like `Intercom-Version`):

```python
    query_params = {
        'per_page': 20,
        'starting_after': "starting_after_example",
    }
    header_params = {
        'Intercom-Version': IntercomVersion("Unstable"),
    }
    try:
        # List all conversations
        api_response = intercom.ConversationsApi.list_conversations(
            query_params=query_params,
            header_params=header_params,
        )
        pprint(api_response)
    except intercom_python_api.ApiException as e:
        print("Exception when calling ConversationsApi->list_conversations: %s\n" % e)

```
### Parameters

Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
query_params | RequestQueryParams | |
header_params | RequestHeaderParams | |
accept_content_types | typing.Tuple[str] | default is ('application/json', ) | Tells the server the content type(s) that are accepted by the client
stream | bool | default is False | if True then the response.content will be streamed and loaded from a file like object. When downloading a file, set this to True to force the code to deserialize the content to a FileSchema file
timeout | typing.Optional[typing.Union[int, typing.Tuple]] | default is None | the timeout used by the rest client
skip_deserialization | bool | default is False | when True, headers and body will be unset and an instance of api_client.ApiResponseWithoutDeserialization will be returned

### query_params
#### RequestQueryParams

Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
per_page | PerPageSchema | | optional
starting_after | StartingAfterSchema | | optional


# PerPageSchema

## Model Type Info
Input Type | Accessed Type | Description | Notes
------------ | ------------- | ------------- | -------------
decimal.Decimal, int,  | decimal.Decimal,  |  | if omitted the server will use the default value of 20

# StartingAfterSchema

## Model Type Info
Input Type | Accessed Type | Description | Notes
------------ | ------------- | ------------- | -------------
str,  | str,  |  | 

### header_params
#### RequestHeaderParams

Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
Intercom-Version | IntercomVersionSchema | | optional

# IntercomVersionSchema
Type | Description  | Notes
------------- | ------------- | -------------
[**IntercomVersion**](../../models/IntercomVersion.md) |  | 


### Return Types, Responses

Code | Class | Description
------------- | ------------- | -------------
n/a | api_client.ApiResponseWithoutDeserialization | When skip_deserialization is True this response is returned
200 | [ApiResponseFor200](#list_conversations.ApiResponseFor200) | successful
401 | [ApiResponseFor401](#list_conversations.ApiResponseFor401) | Unauthorized
403 | [ApiResponseFor403](#list_conversations.ApiResponseFor403) | API plan restricted

#### list_conversations.ApiResponseFor200
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor200ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor200ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**PaginatedResponse**](../../models/PaginatedResponse.md) |  | 


#### list_conversations.ApiResponseFor401
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor401ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor401ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Error**](../../models/Error.md) |  | 


#### list_conversations.ApiResponseFor403
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor403ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor403ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Error**](../../models/Error.md) |  | 


### Authorization

[bearerAuth](../../../README.md#bearerAuth)

[[Back to top]](#__pageTop) [[Back to API list]](../../../README.md#documentation-for-api-endpoints) [[Back to Model list]](../../../README.md#documentation-for-models) [[Back to README]](../../../README.md)

# **manage_conversation**
<a name="manage_conversation"></a>
> Conversation manage_conversation(id)

Manage a conversation

You can close a conversation. You can snooze a conversation to reopen on a future date. You can open a conversation which is `snoozed` or `closed`. You can assign a conversation to an admin and/or team. 

### Example

* Bearer Authentication (bearerAuth):
```python
import intercom_python_api import Intercom
from intercom_python_api.apis.tags import conversations_api
from intercom_python_api.model.close_conversation_request import CloseConversationRequest
from intercom_python_api.model.conversation import Conversation
from intercom_python_api.model.intercom_version import IntercomVersion
from intercom_python_api.model.assign_conversation_request import AssignConversationRequest
from intercom_python_api.model.snooze_conversation_request import SnoozeConversationRequest
from intercom_python_api.model.error import Error
from intercom_python_api.model.open_conversation_request import OpenConversationRequest

# Create an Intercom client context.
intercom = Intercom(api_key='<YOUR API TOKEN>')
```

An example of an API call passing only required parameters which have no default value:

```python
    path_params = {
        'id': "123",
    }
    header_params = {
    }
    try:
        # Manage a conversation
        api_response = intercom.ConversationsApi.manage_conversation(
            path_params=path_params,
            header_params=header_params,
        )
        pprint(api_response)
    except intercom_python_api.ApiException as e:
        print("Exception when calling ConversationsApi->manage_conversation: %s\n" % e)

```

An example passing **only** the optional values (like `Intercom-Version`):

```python
    path_params = {
        'id': "123",
    }
    header_params = {
        'Intercom-Version': IntercomVersion("Unstable"),
    }
    body = None
    try:
        # Manage a conversation
        api_response = intercom.ConversationsApi.manage_conversation(
            path_params=path_params,
            header_params=header_params,
            body=body,
        )
        pprint(api_response)
    except intercom_python_api.ApiException as e:
        print("Exception when calling ConversationsApi->manage_conversation: %s\n" % e)

```
### Parameters

Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
body | typing.Union[SchemaForRequestBodyApplicationJson, Unset] | optional, default is unset |
header_params | RequestHeaderParams | |
path_params | RequestPathParams | |
content_type | str | optional, default is 'application/json' | Selects the schema and serialization of the request body
accept_content_types | typing.Tuple[str] | default is ('application/json', ) | Tells the server the content type(s) that are accepted by the client
stream | bool | default is False | if True then the response.content will be streamed and loaded from a file like object. When downloading a file, set this to True to force the code to deserialize the content to a FileSchema file
timeout | typing.Optional[typing.Union[int, typing.Tuple]] | default is None | the timeout used by the rest client
skip_deserialization | bool | default is False | when True, headers and body will be unset and an instance of api_client.ApiResponseWithoutDeserialization will be returned

### body

# SchemaForRequestBodyApplicationJson

## Model Type Info
Input Type | Accessed Type | Description | Notes
------------ | ------------- | ------------- | -------------
dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader,  | frozendict.frozendict, str, decimal.Decimal, BoolClass, NoneClass, tuple, bytes, FileIO |  | 

### Composed Schemas (allOf/anyOf/oneOf/not)
#### oneOf
Class Name | Input Type | Accessed Type | Description | Notes
------------- | ------------- | ------------- | ------------- | -------------
[CloseConversationRequest]({{complexTypePrefix}}CloseConversationRequest.md) | [**CloseConversationRequest**]({{complexTypePrefix}}CloseConversationRequest.md) | [**CloseConversationRequest**]({{complexTypePrefix}}CloseConversationRequest.md) |  | 
[SnoozeConversationRequest]({{complexTypePrefix}}SnoozeConversationRequest.md) | [**SnoozeConversationRequest**]({{complexTypePrefix}}SnoozeConversationRequest.md) | [**SnoozeConversationRequest**]({{complexTypePrefix}}SnoozeConversationRequest.md) |  | 
[OpenConversationRequest]({{complexTypePrefix}}OpenConversationRequest.md) | [**OpenConversationRequest**]({{complexTypePrefix}}OpenConversationRequest.md) | [**OpenConversationRequest**]({{complexTypePrefix}}OpenConversationRequest.md) |  | 
[AssignConversationRequest]({{complexTypePrefix}}AssignConversationRequest.md) | [**AssignConversationRequest**]({{complexTypePrefix}}AssignConversationRequest.md) | [**AssignConversationRequest**]({{complexTypePrefix}}AssignConversationRequest.md) |  | 

### header_params
#### RequestHeaderParams

Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
Intercom-Version | IntercomVersionSchema | | optional

# IntercomVersionSchema
Type | Description  | Notes
------------- | ------------- | -------------
[**IntercomVersion**](../../models/IntercomVersion.md) |  | 


### path_params
#### RequestPathParams

Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
id | IdSchema | | 

# IdSchema

## Model Type Info
Input Type | Accessed Type | Description | Notes
------------ | ------------- | ------------- | -------------
str,  | str,  |  | 

### Return Types, Responses

Code | Class | Description
------------- | ------------- | -------------
n/a | api_client.ApiResponseWithoutDeserialization | When skip_deserialization is True this response is returned
200 | [ApiResponseFor200](#manage_conversation.ApiResponseFor200) | Assign a conversation
404 | [ApiResponseFor404](#manage_conversation.ApiResponseFor404) | Not found
401 | [ApiResponseFor401](#manage_conversation.ApiResponseFor401) | Unauthorized
403 | [ApiResponseFor403](#manage_conversation.ApiResponseFor403) | API plan restricted

#### manage_conversation.ApiResponseFor200
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor200ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor200ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Conversation**](../../models/Conversation.md) |  | 


#### manage_conversation.ApiResponseFor404
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor404ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor404ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Error**](../../models/Error.md) |  | 


#### manage_conversation.ApiResponseFor401
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor401ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor401ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Error**](../../models/Error.md) |  | 


#### manage_conversation.ApiResponseFor403
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor403ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor403ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Error**](../../models/Error.md) |  | 


### Authorization

[bearerAuth](../../../README.md#bearerAuth)

[[Back to top]](#__pageTop) [[Back to API list]](../../../README.md#documentation-for-api-endpoints) [[Back to Model list]](../../../README.md#documentation-for-models) [[Back to README]](../../../README.md)

# **redact_conversation**
<a name="redact_conversation"></a>
> Conversation redact_conversation()

Redact a conversation part

You can redact a conversation part or the source message of a conversation (as seen in the source object).  > ðŸ“˜ Which parts and source messages can I redact? > > If you are redacting a conversation part, it must have a `body`. > If you are redacting a source message, it must have been created by a contact. > We will return a `conversation_part_not_redactable` error if these criteria are not met.  

### Example

* Bearer Authentication (bearerAuth):
```python
import intercom_python_api import Intercom
from intercom_python_api.apis.tags import conversations_api
from intercom_python_api.model.conversation import Conversation
from intercom_python_api.model.intercom_version import IntercomVersion
from intercom_python_api.model.error import Error
from intercom_python_api.model.redact_conversation_request import RedactConversationRequest

# Create an Intercom client context.
intercom = Intercom(api_key='<YOUR API TOKEN>')

```

An example passing **only** the optional values (like `Intercom-Version`):

```python
    header_params = {
        'Intercom-Version': IntercomVersion("Unstable"),
    }
    body = RedactConversationRequest(None)
    try:
        # Redact a conversation part
        api_response = intercom.ConversationsApi.redact_conversation(
            header_params=header_params,
            body=body,
        )
        pprint(api_response)
    except intercom_python_api.ApiException as e:
        print("Exception when calling ConversationsApi->redact_conversation: %s\n" % e)

```
### Parameters

Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
body | typing.Union[SchemaForRequestBodyApplicationJson, Unset] | optional, default is unset |
header_params | RequestHeaderParams | |
content_type | str | optional, default is 'application/json' | Selects the schema and serialization of the request body
accept_content_types | typing.Tuple[str] | default is ('application/json', ) | Tells the server the content type(s) that are accepted by the client
stream | bool | default is False | if True then the response.content will be streamed and loaded from a file like object. When downloading a file, set this to True to force the code to deserialize the content to a FileSchema file
timeout | typing.Optional[typing.Union[int, typing.Tuple]] | default is None | the timeout used by the rest client
skip_deserialization | bool | default is False | when True, headers and body will be unset and an instance of api_client.ApiResponseWithoutDeserialization will be returned

### body

# SchemaForRequestBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**RedactConversationRequest**](../../models/RedactConversationRequest.md) |  | 


### header_params
#### RequestHeaderParams

Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
Intercom-Version | IntercomVersionSchema | | optional

# IntercomVersionSchema
Type | Description  | Notes
------------- | ------------- | -------------
[**IntercomVersion**](../../models/IntercomVersion.md) |  | 


### Return Types, Responses

Code | Class | Description
------------- | ------------- | -------------
n/a | api_client.ApiResponseWithoutDeserialization | When skip_deserialization is True this response is returned
200 | [ApiResponseFor200](#redact_conversation.ApiResponseFor200) | Redact a conversation part
404 | [ApiResponseFor404](#redact_conversation.ApiResponseFor404) | Not found
401 | [ApiResponseFor401](#redact_conversation.ApiResponseFor401) | Unauthorized

#### redact_conversation.ApiResponseFor200
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor200ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor200ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Conversation**](../../models/Conversation.md) |  | 


#### redact_conversation.ApiResponseFor404
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor404ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor404ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Error**](../../models/Error.md) |  | 


#### redact_conversation.ApiResponseFor401
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor401ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor401ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Error**](../../models/Error.md) |  | 


### Authorization

[bearerAuth](../../../README.md#bearerAuth)

[[Back to top]](#__pageTop) [[Back to API list]](../../../README.md#documentation-for-api-endpoints) [[Back to Model list]](../../../README.md#documentation-for-models) [[Back to README]](../../../README.md)

# **reply_conversation**
<a name="reply_conversation"></a>
> Conversation reply_conversation(id)

Reply to a conversation

You can reply to a conversation with a message from an admin or on behalf of a contact, or with a note for admins.

### Example

* Bearer Authentication (bearerAuth):
```python
import intercom_python_api import Intercom
from intercom_python_api.apis.tags import conversations_api
from intercom_python_api.model.conversation import Conversation
from intercom_python_api.model.intercom_version import IntercomVersion
from intercom_python_api.model.reply_conversation_request import ReplyConversationRequest
from intercom_python_api.model.error import Error

# Create an Intercom client context.
intercom = Intercom(api_key='<YOUR API TOKEN>')
```

An example of an API call passing only required parameters which have no default value:

```python
    path_params = {
        'id': None,
    }
    header_params = {
    }
    try:
        # Reply to a conversation
        api_response = intercom.ConversationsApi.reply_conversation(
            path_params=path_params,
            header_params=header_params,
        )
        pprint(api_response)
    except intercom_python_api.ApiException as e:
        print("Exception when calling ConversationsApi->reply_conversation: %s\n" % e)

```

An example passing **only** the optional values (like `Intercom-Version`):

```python
    path_params = {
        'id': None,
    }
    header_params = {
        'Intercom-Version': IntercomVersion("Unstable"),
    }
    body = ReplyConversationRequest(None)
    try:
        # Reply to a conversation
        api_response = intercom.ConversationsApi.reply_conversation(
            path_params=path_params,
            header_params=header_params,
            body=body,
        )
        pprint(api_response)
    except intercom_python_api.ApiException as e:
        print("Exception when calling ConversationsApi->reply_conversation: %s\n" % e)

```
### Parameters

Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
body | typing.Union[SchemaForRequestBodyApplicationJson, Unset] | optional, default is unset |
header_params | RequestHeaderParams | |
path_params | RequestPathParams | |
content_type | str | optional, default is 'application/json' | Selects the schema and serialization of the request body
accept_content_types | typing.Tuple[str] | default is ('application/json', ) | Tells the server the content type(s) that are accepted by the client
stream | bool | default is False | if True then the response.content will be streamed and loaded from a file like object. When downloading a file, set this to True to force the code to deserialize the content to a FileSchema file
timeout | typing.Optional[typing.Union[int, typing.Tuple]] | default is None | the timeout used by the rest client
skip_deserialization | bool | default is False | when True, headers and body will be unset and an instance of api_client.ApiResponseWithoutDeserialization will be returned

### body

# SchemaForRequestBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**ReplyConversationRequest**](../../models/ReplyConversationRequest.md) |  | 


### header_params
#### RequestHeaderParams

Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
Intercom-Version | IntercomVersionSchema | | optional

# IntercomVersionSchema
Type | Description  | Notes
------------- | ------------- | -------------
[**IntercomVersion**](../../models/IntercomVersion.md) |  | 


### path_params
#### RequestPathParams

Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
id | IdSchema | | 

# IdSchema

## Model Type Info
Input Type | Accessed Type | Description | Notes
------------ | ------------- | ------------- | -------------
dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader,  | frozendict.frozendict, str, decimal.Decimal, BoolClass, NoneClass, tuple, bytes, FileIO |  | 

### Composed Schemas (allOf/anyOf/oneOf/not)
#### oneOf
Class Name | Input Type | Accessed Type | Description | Notes
------------- | ------------- | ------------- | ------------- | -------------
[one_of_0](#one_of_0) | str,  | str,  | The id of the conversation to target. | 
[one_of_1](#one_of_1) | str,  | str,  | You can also reply to the most recent conversation on a workspace by specifying &#x60;last&#x60; as the string. | must be one of ["last", ] 

# one_of_0

The id of the conversation to target.

## Model Type Info
Input Type | Accessed Type | Description | Notes
------------ | ------------- | ------------- | -------------
str,  | str,  | The id of the conversation to target. | 

# one_of_1

You can also reply to the most recent conversation on a workspace by specifying `last` as the string.

## Model Type Info
Input Type | Accessed Type | Description | Notes
------------ | ------------- | ------------- | -------------
str,  | str,  | You can also reply to the most recent conversation on a workspace by specifying &#x60;last&#x60; as the string. | must be one of ["last", ] 

### Return Types, Responses

Code | Class | Description
------------- | ------------- | -------------
n/a | api_client.ApiResponseWithoutDeserialization | When skip_deserialization is True this response is returned
200 | [ApiResponseFor200](#reply_conversation.ApiResponseFor200) | User last conversation reply
404 | [ApiResponseFor404](#reply_conversation.ApiResponseFor404) | Not found
401 | [ApiResponseFor401](#reply_conversation.ApiResponseFor401) | Unauthorized
403 | [ApiResponseFor403](#reply_conversation.ApiResponseFor403) | API plan restricted

#### reply_conversation.ApiResponseFor200
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor200ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor200ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Conversation**](../../models/Conversation.md) |  | 


#### reply_conversation.ApiResponseFor404
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor404ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor404ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Error**](../../models/Error.md) |  | 


#### reply_conversation.ApiResponseFor401
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor401ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor401ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Error**](../../models/Error.md) |  | 


#### reply_conversation.ApiResponseFor403
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor403ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor403ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Error**](../../models/Error.md) |  | 


### Authorization

[bearerAuth](../../../README.md#bearerAuth)

[[Back to top]](#__pageTop) [[Back to API list]](../../../README.md#documentation-for-api-endpoints) [[Back to Model list]](../../../README.md#documentation-for-models) [[Back to README]](../../../README.md)

# **retrieve_conversation**
<a name="retrieve_conversation"></a>
> Conversation retrieve_conversation(id)

Retrieve a conversation

 You can fetch the details of a single conversation.  This will return a single Conversation model with all its conversation parts.  > ðŸš§ Hard limit of 500 parts > > The maximum number of conversation parts that can be returned via the API is 500. If you have more than that we will return the 500 most recent conversation parts.  

### Example

* Bearer Authentication (bearerAuth):
```python
import intercom_python_api import Intercom
from intercom_python_api.apis.tags import conversations_api
from intercom_python_api.model.conversation import Conversation
from intercom_python_api.model.intercom_version import IntercomVersion
from intercom_python_api.model.error import Error

# Create an Intercom client context.
intercom = Intercom(api_key='<YOUR API TOKEN>')
```

An example of an API call passing only required parameters which have no default value:

```python
    path_params = {
        'id': 123,
    }
    query_params = {
    }
    header_params = {
    }
    try:
        # Retrieve a conversation
        api_response = intercom.ConversationsApi.retrieve_conversation(
            path_params=path_params,
            query_params=query_params,
            header_params=header_params,
        )
        pprint(api_response)
    except intercom_python_api.ApiException as e:
        print("Exception when calling ConversationsApi->retrieve_conversation: %s\n" % e)

```

An example passing **only** the optional values (like `Intercom-Version`):

```python
    path_params = {
        'id': 123,
    }
    query_params = {
        'display_as': "plaintext",
    }
    header_params = {
        'Intercom-Version': IntercomVersion("Unstable"),
    }
    try:
        # Retrieve a conversation
        api_response = intercom.ConversationsApi.retrieve_conversation(
            path_params=path_params,
            query_params=query_params,
            header_params=header_params,
        )
        pprint(api_response)
    except intercom_python_api.ApiException as e:
        print("Exception when calling ConversationsApi->retrieve_conversation: %s\n" % e)

```
### Parameters

Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
query_params | RequestQueryParams | |
header_params | RequestHeaderParams | |
path_params | RequestPathParams | |
accept_content_types | typing.Tuple[str] | default is ('application/json', ) | Tells the server the content type(s) that are accepted by the client
stream | bool | default is False | if True then the response.content will be streamed and loaded from a file like object. When downloading a file, set this to True to force the code to deserialize the content to a FileSchema file
timeout | typing.Optional[typing.Union[int, typing.Tuple]] | default is None | the timeout used by the rest client
skip_deserialization | bool | default is False | when True, headers and body will be unset and an instance of api_client.ApiResponseWithoutDeserialization will be returned

### query_params
#### RequestQueryParams

Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
display_as | DisplayAsSchema | | optional


# DisplayAsSchema

## Model Type Info
Input Type | Accessed Type | Description | Notes
------------ | ------------- | ------------- | -------------
str,  | str,  |  | 

### header_params
#### RequestHeaderParams

Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
Intercom-Version | IntercomVersionSchema | | optional

# IntercomVersionSchema
Type | Description  | Notes
------------- | ------------- | -------------
[**IntercomVersion**](../../models/IntercomVersion.md) |  | 


### path_params
#### RequestPathParams

Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
id | IdSchema | | 

# IdSchema

## Model Type Info
Input Type | Accessed Type | Description | Notes
------------ | ------------- | ------------- | -------------
decimal.Decimal, int,  | decimal.Decimal,  |  | 

### Return Types, Responses

Code | Class | Description
------------- | ------------- | -------------
n/a | api_client.ApiResponseWithoutDeserialization | When skip_deserialization is True this response is returned
200 | [ApiResponseFor200](#retrieve_conversation.ApiResponseFor200) | conversation found
404 | [ApiResponseFor404](#retrieve_conversation.ApiResponseFor404) | Not found
401 | [ApiResponseFor401](#retrieve_conversation.ApiResponseFor401) | Unauthorized
403 | [ApiResponseFor403](#retrieve_conversation.ApiResponseFor403) | API plan restricted

#### retrieve_conversation.ApiResponseFor200
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor200ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor200ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Conversation**](../../models/Conversation.md) |  | 


#### retrieve_conversation.ApiResponseFor404
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor404ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor404ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Error**](../../models/Error.md) |  | 


#### retrieve_conversation.ApiResponseFor401
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor401ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor401ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Error**](../../models/Error.md) |  | 


#### retrieve_conversation.ApiResponseFor403
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor403ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor403ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Error**](../../models/Error.md) |  | 


### Authorization

[bearerAuth](../../../README.md#bearerAuth)

[[Back to top]](#__pageTop) [[Back to API list]](../../../README.md#documentation-for-api-endpoints) [[Back to Model list]](../../../README.md#documentation-for-models) [[Back to README]](../../../README.md)

# **search_conversations**
<a name="search_conversations"></a>
> ConversationList search_conversations()

Search conversations

You can search for multiple conversations by the value of their attributes in order to fetch exactly which ones you want.  To search for conversations, you need to send a POST request to https://api.intercom.io/conversations/search. This will accept a query object in the body which will define your filters in order to search for conversations.  > ðŸš§ Nesting & Limitations > > You can nest these filters in order to get even more granular insights that pinpoint exactly what you need. Example: (1 OR 2) AND (3 OR 4). > There are some limitations to the amount of multiple's there can be: > - There's a limit of max 2 nested filters > - There's a limit of max 15 filters for each AND or OR group  ### Accepted Fields  Most keys listed as part of the The conversation model is searchable, whether writeable or not. The value you search for has to match the accepted type, otherwise the query will fail (ie. as `created_at` accepts a date, the `value` cannot be a string such as `\"foorbar\"`).  | Field                                     | Type                                                                                     | | :---------------------------------------- | :--------------------------------------------------------------------------------------- | | id                                        | String                                                                                   | | created_at                                | Date (UNIX timestamp)                                                                    | | updated_at                                | Date (UNIX timestamp)                                                                    | | source.type                               | String                                                                                   | | source.id                                 | String                                                                                   | | source.delivered_as                       | String                                                                                   | | source.subject                            | String                                                                                   | | source.body                               | String                                                                                   | | source.author.id                          | String                                                                                   | | source.author.type                        | String                                                                                   | | source.author.name                        | String                                                                                   | | source.author.email                       | String                                                                                   | | source.url                                | String                                                                                   | | contact_ids                               | String                                                                                   | | teammate_ids                              | String                                                                                   | | admin_assignee_id                         | String                                                                                   | | team_assignee_id                          | String                                                                                   | | channel_initiated                         | String<br>Accepted fields are `conversation`, `push`, `facebook`, `twitter` and `email`. | | open                                      | Boolean                                                                                  | | read                                      | Boolean                                                                                  | | state                                     | String                                                                                   | | waiting_since                             | Date (UNIX timestamp)                                                                    | | snoozed_until                             | Date (UNIX timestamp)                                                                    | | tag_ids                                   | String                                                                                   | | priority                                  | String                                                                                   | | statistics.time_to_assignment             | Integer                                                                                  | | statistics.time_to_admin_reply            | Integer                                                                                  | | statistics.time_to_first_close            | Integer                                                                                  | | statistics.time_to_last_close             | Integer                                                                                  | | statistics.median_time_to_reply           | Integer                                                                                  | | statistics.first_contact_reply_at         | Date (UNIX timestamp)                                                                    | | statistics.first_assignment_at            | Date (UNIX timestamp)                                                                    | | statistics.first_admin_reply_at           | Date (UNIX timestamp)                                                                    | | statistics.first_close_at                 | Date (UNIX timestamp)                                                                    | | statistics.last_assignment_at             | Date (UNIX timestamp)                                                                    | | statistics.last_assignment_admin_reply_at | Date (UNIX timestamp)                                                                    | | statistics.last_contact_reply_at          | Date (UNIX timestamp)                                                                    | | statistics.last_admin_reply_at            | Date (UNIX timestamp)                                                                    | | statistics.last_close_at                  | Date (UNIX timestamp)                                                                    | | statistics.last_closed_by_id              | String                                                                                   | | statistics.count_reopens                  | Integer                                                                                  | | statistics.count_assignments              | Integer                                                                                  | | statistics.count_conversation_parts       | Integer                                                                                  | | conversation_rating.requested_at          | Date (UNIX timestamp)                                                                    | | conversation_rating.replied_at            | Date (UNIX timestamp)                                                                    | | conversation_rating.score                 | Integer                                                                                  | | conversation_rating.remark                | String                                                                                   | | conversation_rating.contact_id            | String                                                                                   | | conversation_rating.admin_d               | String                                                                                   |  

### Example

* Bearer Authentication (bearerAuth):
```python
import intercom_python_api import Intercom
from intercom_python_api.apis.tags import conversations_api
from intercom_python_api.model.conversation_list import ConversationList
from intercom_python_api.model.search_request import SearchRequest
from intercom_python_api.model.intercom_version import IntercomVersion

# Create an Intercom client context.
intercom = Intercom(api_key='<YOUR API TOKEN>')

```

An example passing **only** the optional values (like `Intercom-Version`):

```python
    header_params = {
        'Intercom-Version': IntercomVersion("Unstable"),
    }
    body = SearchRequest(
        query=None,
        pagination=StartingAfterPaging(
            page=2,
            starting_after="1HaSB+xrOyyMXAkS/c1RteCL7BzOzTvYjmjakgTergIH31eoe2v4/sbLsJWP\\nIncfQLD3ouPkZlCwJ86F\\n",
        ),
    )
    try:
        # Search conversations
        api_response = intercom.ConversationsApi.search_conversations(
            header_params=header_params,
            body=body,
        )
        pprint(api_response)
    except intercom_python_api.ApiException as e:
        print("Exception when calling ConversationsApi->search_conversations: %s\n" % e)

```
### Parameters

Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
body | typing.Union[SchemaForRequestBodyApplicationJson, Unset] | optional, default is unset |
header_params | RequestHeaderParams | |
content_type | str | optional, default is 'application/json' | Selects the schema and serialization of the request body
accept_content_types | typing.Tuple[str] | default is ('application/json', ) | Tells the server the content type(s) that are accepted by the client
stream | bool | default is False | if True then the response.content will be streamed and loaded from a file like object. When downloading a file, set this to True to force the code to deserialize the content to a FileSchema file
timeout | typing.Optional[typing.Union[int, typing.Tuple]] | default is None | the timeout used by the rest client
skip_deserialization | bool | default is False | when True, headers and body will be unset and an instance of api_client.ApiResponseWithoutDeserialization will be returned

### body

# SchemaForRequestBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**SearchRequest**](../../models/SearchRequest.md) |  | 


### header_params
#### RequestHeaderParams

Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
Intercom-Version | IntercomVersionSchema | | optional

# IntercomVersionSchema
Type | Description  | Notes
------------- | ------------- | -------------
[**IntercomVersion**](../../models/IntercomVersion.md) |  | 


### Return Types, Responses

Code | Class | Description
------------- | ------------- | -------------
n/a | api_client.ApiResponseWithoutDeserialization | When skip_deserialization is True this response is returned
200 | [ApiResponseFor200](#search_conversations.ApiResponseFor200) | successful

#### search_conversations.ApiResponseFor200
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor200ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor200ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**ConversationList**](../../models/ConversationList.md) |  | 


### Authorization

[bearerAuth](../../../README.md#bearerAuth)

[[Back to top]](#__pageTop) [[Back to API list]](../../../README.md#documentation-for-api-endpoints) [[Back to Model list]](../../../README.md#documentation-for-models) [[Back to README]](../../../README.md)

# **update_conversation**
<a name="update_conversation"></a>
> Conversation update_conversation(id)

Update a conversation

 You can update an existing conversation.  > ðŸ“˜ > > If you want to update a conversation with either a reply (or actions such as assign, unassign, open, close or snooze) then take a look at their own sections respectively as they currently require different endpoints and parameters.  

### Example

* Bearer Authentication (bearerAuth):
```python
import intercom_python_api import Intercom
from intercom_python_api.apis.tags import conversations_api
from intercom_python_api.model.conversation import Conversation
from intercom_python_api.model.intercom_version import IntercomVersion
from intercom_python_api.model.update_conversation_request import UpdateConversationRequest
from intercom_python_api.model.error import Error

# Create an Intercom client context.
intercom = Intercom(api_key='<YOUR API TOKEN>')
```

An example of an API call passing only required parameters which have no default value:

```python
    path_params = {
        'id': 123,
    }
    query_params = {
    }
    header_params = {
    }
    try:
        # Update a conversation
        api_response = intercom.ConversationsApi.update_conversation(
            path_params=path_params,
            query_params=query_params,
            header_params=header_params,
        )
        pprint(api_response)
    except intercom_python_api.ApiException as e:
        print("Exception when calling ConversationsApi->update_conversation: %s\n" % e)

```

An example passing **only** the optional values (like `Intercom-Version`):

```python
    path_params = {
        'id': 123,
    }
    query_params = {
        'display_as': "plaintext",
    }
    header_params = {
        'Intercom-Version': IntercomVersion("Unstable"),
    }
    body = UpdateConversationRequest(
        read=True,
        custom_attributes=CustomAttributes(
            key=None,
        ),
    )
    try:
        # Update a conversation
        api_response = intercom.ConversationsApi.update_conversation(
            path_params=path_params,
            query_params=query_params,
            header_params=header_params,
            body=body,
        )
        pprint(api_response)
    except intercom_python_api.ApiException as e:
        print("Exception when calling ConversationsApi->update_conversation: %s\n" % e)

```
### Parameters

Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
body | typing.Union[SchemaForRequestBodyApplicationJson, Unset] | optional, default is unset |
query_params | RequestQueryParams | |
header_params | RequestHeaderParams | |
path_params | RequestPathParams | |
content_type | str | optional, default is 'application/json' | Selects the schema and serialization of the request body
accept_content_types | typing.Tuple[str] | default is ('application/json', ) | Tells the server the content type(s) that are accepted by the client
stream | bool | default is False | if True then the response.content will be streamed and loaded from a file like object. When downloading a file, set this to True to force the code to deserialize the content to a FileSchema file
timeout | typing.Optional[typing.Union[int, typing.Tuple]] | default is None | the timeout used by the rest client
skip_deserialization | bool | default is False | when True, headers and body will be unset and an instance of api_client.ApiResponseWithoutDeserialization will be returned

### body

# SchemaForRequestBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**UpdateConversationRequest**](../../models/UpdateConversationRequest.md) |  | 


### query_params
#### RequestQueryParams

Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
display_as | DisplayAsSchema | | optional


# DisplayAsSchema

## Model Type Info
Input Type | Accessed Type | Description | Notes
------------ | ------------- | ------------- | -------------
str,  | str,  |  | 

### header_params
#### RequestHeaderParams

Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
Intercom-Version | IntercomVersionSchema | | optional

# IntercomVersionSchema
Type | Description  | Notes
------------- | ------------- | -------------
[**IntercomVersion**](../../models/IntercomVersion.md) |  | 


### path_params
#### RequestPathParams

Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
id | IdSchema | | 

# IdSchema

## Model Type Info
Input Type | Accessed Type | Description | Notes
------------ | ------------- | ------------- | -------------
decimal.Decimal, int,  | decimal.Decimal,  |  | 

### Return Types, Responses

Code | Class | Description
------------- | ------------- | -------------
n/a | api_client.ApiResponseWithoutDeserialization | When skip_deserialization is True this response is returned
200 | [ApiResponseFor200](#update_conversation.ApiResponseFor200) | conversation found
404 | [ApiResponseFor404](#update_conversation.ApiResponseFor404) | Not found
401 | [ApiResponseFor401](#update_conversation.ApiResponseFor401) | Unauthorized
403 | [ApiResponseFor403](#update_conversation.ApiResponseFor403) | API plan restricted

#### update_conversation.ApiResponseFor200
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor200ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor200ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Conversation**](../../models/Conversation.md) |  | 


#### update_conversation.ApiResponseFor404
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor404ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor404ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Error**](../../models/Error.md) |  | 


#### update_conversation.ApiResponseFor401
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor401ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor401ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Error**](../../models/Error.md) |  | 


#### update_conversation.ApiResponseFor403
Name | Type | Description  | Notes
------------- | ------------- | ------------- | -------------
response | urllib3.HTTPResponse | Raw response |
body | typing.Union[SchemaFor403ResponseBodyApplicationJson, ] |  |
headers | Unset | headers were not defined |

# SchemaFor403ResponseBodyApplicationJson
Type | Description  | Notes
------------- | ------------- | -------------
[**Error**](../../models/Error.md) |  | 


### Authorization

[bearerAuth](../../../README.md#bearerAuth)

[[Back to top]](#__pageTop) [[Back to API list]](../../../README.md#documentation-for-api-endpoints) [[Back to Model list]](../../../README.md#documentation-for-models) [[Back to README]](../../../README.md)

